<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web-exam</title>
      <link href="/web-exam.html"/>
      <url>/web-exam.html</url>
      
        <content type="html"><![CDATA[<h1 id="复习参考"><a href="#复习参考" class="headerlink" title="复习参考"></a>复习参考</h1><h2 id="实现提示："><a href="#实现提示：" class="headerlink" title="实现提示："></a>实现提示：</h2><ol><li>使用原生的javascript(ECMA 5)，不得使用 jquery等第三方扩展库</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>用户场景： 用户通过浏览器访问某网站的用户注册页面。如：<a href="http://x.com/users/new.php?name=tom&amp;email=123@1.com#info" target="_blank" rel="noopener">http://x.com/users/new.php?name=tom&amp;email=123@1.com#info</a><ul><li>当用户未填写用户名，提交后，浏览器立即弹出对话框，提示用户名为必填</li><li>当用户填写了一个常见的用户名如：tom，提交后，浏览器弹出对话框，提示该用户名已被占用</li><li>当用户终于按要求正确填写所有字段，提交后，页面跳转至网站首页</li></ul></li><li>用户场景： 用户使用Web浏览器访问某购物网站，在地址栏里输入：<a href="http://x.com/index.php?category=nba#top" target="_blank" rel="noopener">http://x.com/index.php?category=nba#top</a> ，然后按回车键，看到了琳琅满目的商品首页<ul><li>当用户点击购买下单按钮，浏览器跳转至登录页面，提示用户登录</li><li>当用户填写正确的用户名和密码，并勾选”记住我“的选项，提交。页面跳转到下单页面</li><li>几天后，小明再次浏览商品并下单，这次没有提示登录，而是直接看到了下单页面</li></ul></li></ol><p>请基于上述用户场景，说明在浏览器背后，经历了哪些技术阶段和发生了什么？，主要有：</p><ul><li><p>什么是Web浏览器、Web服务器？具体的软件名称？所起的作用？</p></li><li><p>什么是URL？上述URL各个组成部分的名称和含义解释</p></li><li><p>具体描述上述场景中包括哪几次HTTP交互？一对http请求（请求地址、请求头）和响应（响应头、返回内容）即算一次交互</p></li><li><p>登录功能是采用何种技术实现的？存在哪些缺点或不足？</p></li><li><p>什么是客户端检验与服务端校验，各自的优劣？</p></li><li><p>什么是客户端渲染与服务端渲染，各自的优劣？</p></li></ul><h2 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h2><ol><li>什么是语义标记？请以三类人群为例(正常人群、搜索引擎、视障人群等)，说明这些用户访问Web网的方式、工具与解析过程，以及使用语义标记的好处？</li><li>说明HTML与SVG、MathML、VoiceML等的区别和共同点？</li><li>请举出一个实例(包括标记名称与主要属性)，说明下列各类(注意：是一类，不是一个)标记的语义和典型用法：</li></ol><ul><li>列表元素</li><li>表格元素</li><li>块元素 block Element</li><li>内联元素 inline Element</li><li>其它语义类型，如多媒体元素、链接、框架等</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>请编写代码（HTML文件与Javascript文件分开编写），实现符合如下要求的表单</p><ol><li>接收表单的服务器地址为:”posts/save.php”</li><li>表单数据将被写入到服务器端的数据库</li><li>表单有一个单行文本框，且预置的文本为：“欢迎光临”</li><li>表单有一个多行文本控件，且预置的文本为：“welcome！”</li><li>表单有三个单选按钮，预置第二个单选按钮被选中</li><li>表单有三个复选框，预置第一个和第二个复选框被选中</li><li>表单有一个列表框控件，预置第三个列表项被选中</li><li>表单有一个列表框控件，预置第一个和第三个列表项被选中</li><li>表单有一个隐藏的控件，其值为“1”</li><li>表单有一个文件上传的控件</li><li>表单有一个提交表单按纽</li><li>当表单被提交时，弹出一个对话框，展示以上各文本输入框、单选框、复选框、下拉列表框等控件的值</li></ol><blockquote><p>参考 <a href="http://www.openxy.com/books/web_front/04/code/form.html" target="_blank" rel="noopener">http://www.openxy.com/books/web_front/04/code/form.html</a></p></blockquote><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>按如图所示布局(如三行两列，三行三列等，并支持嵌套)：</p><ul><li>请基于CSS 浮动(float)属性，编写代码，实现如图所示的页面布局</li><li>除浮动之外，请列举至少三种定位方式，并一一说明其定位的特点？</li><li><ol><li>除浮动之外，请列举至少三种列式布局技术，并一一说明其各自的技术优势和不足(注意：如果实现原理相同，则视为同一类)</li></ol></li></ul><p>参考 <a href="http://www.openxy.com/books/web_front/07/code/layout/float-more.html" target="_blank" rel="noopener">http://www.openxy.com/books/web_front/07/code/layout/float-more.html</a></p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>解释下列名词，并举一代码实例，并给予注释或说明</p><ol><li>DOM与BOM</li><li>CSS伪类与CSS伪元素</li><li>Jquery</li><li>SCSS</li><li>响应式设计</li><li>媒体查询</li><li>cookies</li><li>node.js</li><li>http协议与https协议</li><li>事件驱动</li><li>定时器</li><li>同步调用与异步调用</li><li>安全字体、网络字体、图标字体</li><li>Javascript与node.js</li><li>本地存储与服务端存储</li><li>窗口与文档</li><li>URL绝对地址与URL相对地址</li></ol><h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><p>请结合你本学期的个人项目案例，举例说明：</p><ol><li>什么是Web页面的内容、结构、样式、行为？在前端技术中，它们各自用何种技术进行描述或表达？这种分层的设计模式有什么好处？前端开发技术中还有哪些设计模式？请列举出至少一种并说明。</li><li>什么是Web前端技术、Web后端技术？结合你的项目，谈谈两者的优缺点是什么？</li><li>什么是DOM？以你的项目为例，给出关键代码，说明如何使用DOM API实现页面的增删改CUD操作（8分）</li><li>什么是响应式设计？以你的项目为例，说明如何使用具体的前端技术解决多端适配的问题（5分）</li><li>什么是前端模板和客户端渲染？以你的项目为例，说明如何实现的（5分）</li><li>如果对你的个人项目进行升级，你拟采用哪些新模式或新技术？请列出其名字，结合项目说明其功能及如何应用，分析其优与劣<ul><li>譬如前后端分离、前端组件化、反应式编程、双向绑定、Fetch等</li></ul></li></ol><blockquote><p>注意：要紧密结合自己的个人项目进行说明，否则有扣分</p></blockquote><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是Web浏览器、Web服务器？具体的软件名称？所起的作用？"><a href="#什么是Web浏览器、Web服务器？具体的软件名称？所起的作用？" class="headerlink" title="什么是Web浏览器、Web服务器？具体的软件名称？所起的作用？"></a><strong>什么是Web浏览器、Web服务器？具体的软件名称？所起的作用？</strong></h3><ul><li><strong>网页浏览器</strong>（英语：<strong>Web Browser</strong>，常简称为<strong>浏览器</strong>）是一种用于检索并展示<a href="https://zh.wikipedia.org/wiki/全球資訊網" target="_blank" rel="noopener">万维网</a>信息资源的<a href="https://zh.wikipedia.org/wiki/應用程式" target="_blank" rel="noopener">应用程序</a>。这些信息资源可为网页、图片、影音或其他内容，它们由<a href="https://zh.wikipedia.org/wiki/統一資源標誌符" target="_blank" rel="noopener">统一资源标志符</a>标识。信息资源中的<a href="https://zh.wikipedia.org/wiki/超連結" target="_blank" rel="noopener">超链接</a>可使用户方便地浏览相关信息。网页浏览器虽然主要用于使用万维网，但也可用于获取<a href="https://zh.wikipedia.org/wiki/专用网络" target="_blank" rel="noopener">专用网络</a>中<a href="https://zh.wikipedia.org/wiki/網頁伺服器" target="_blank" rel="noopener">网页服务器</a>之信息或<a href="https://zh.wikipedia.org/wiki/檔案系統" target="_blank" rel="noopener">文件系统</a>内之文件。主流网页浏览器有<a href="https://zh.wikipedia.org/wiki/Mozilla_Firefox" target="_blank" rel="noopener">Mozilla Firefox</a>、<a href="https://zh.wikipedia.org/wiki/Internet_Explorer" target="_blank" rel="noopener">Internet Explorer</a>、<a href="https://zh.wikipedia.org/wiki/Microsoft_Edge" target="_blank" rel="noopener">Microsoft Edge</a>、<a href="https://zh.wikipedia.org/wiki/Google_Chrome" target="_blank" rel="noopener">Google Chrome</a>、<a href="https://zh.wikipedia.org/wiki/Opera電腦瀏覽器" target="_blank" rel="noopener">Opera</a>及<a href="https://zh.wikipedia.org/wiki/Safari" target="_blank" rel="noopener">Safari</a>。</li><li><strong>网页服务器</strong>（英语：Web server）一词有两个意思：<ol><li>一台负责提供网页的<a href="https://zh.wikipedia.org/wiki/電腦" target="_blank" rel="noopener">电脑</a>，主要是各种编程语言构建而成，通过<a href="https://zh.wikipedia.org/wiki/超文本传输协议" target="_blank" rel="noopener">超文本传输协议</a>（英语：HTTP）传给客户端（一般是指<a href="https://zh.wikipedia.org/wiki/網頁瀏覽器" target="_blank" rel="noopener">网页浏览器</a>）。</li><li>一个提供网页的服务器程序。</li><li>虽然每个网页服务器程序有很多不同，但有一些共同的特点：每一个网页服务器程序都需要从网络接受<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a>请求，然后提供HTTP回复给请求者。HTTP回复一般包含一个<a href="https://zh.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">HTML</a>文件，有时也可以包含纯文本文件、图像或其他类型的文件。一般来说这些文件都存储在网页服务器的本地文件系统里，而<a href="https://zh.wikipedia.org/wiki/URL" target="_blank" rel="noopener">URL</a>和本地文件名都有一个阶级组织结构的，服务器会简单的把URL对照到本地文件系统中。当正确安装和设置好网页服务器软件，服务器管理员会从服务器软件放置文件的地方指定一个本地路径名为根目录。例如，在“example.funnycorp.com”服务器上设置了服务器软件，并把服务器软件的根目录设置为“/home/public/web/”，当一个浏览者输入<a href="https://zh.wikipedia.org/wiki/URL" target="_blank" rel="noopener">URL</a> “<a href="http://example.funnycorp.com/lips/raspberry.html”，“example.funnycorp.com”上的服务器软件就会读取“/home/public/web/lips/raspberry.html”这个文件。" target="_blank" rel="noopener">http://example.funnycorp.com/lips/raspberry.html”，“example.funnycorp.com”上的服务器软件就会读取“/home/public/web/lips/raspberry.html”这个文件。</a></li><li>现在市面上普遍的<a href="https://zh.wikipedia.org/wiki/超文本传输协议" target="_blank" rel="noopener">超文本传输协议</a>服务器有：<ul><li><a href="https://zh.wikipedia.org/wiki/Apache_Software_Foundation" target="_blank" rel="noopener">Apache Software Foundation</a> 的 <a href="https://zh.wikipedia.org/wiki/Apache_HTTP_Server" target="_blank" rel="noopener">Apache HTTP Server</a></li><li><a href="https://zh.wikipedia.org/wiki/Microsoft_Corporation" target="_blank" rel="noopener">Microsoft Corporation</a> 的 <a href="https://zh.wikipedia.org/wiki/Internet_Information_Server" target="_blank" rel="noopener">Internet Information Server (IIS)</a></li><li><a href="https://zh.wikipedia.org/wiki/Google_LLC" target="_blank" rel="noopener">Google LLC</a>（<a href="https://zh.wikipedia.org/wiki/Alphabet_Inc." target="_blank" rel="noopener">Alphabet Inc.</a> 子公司）的 <a href="https://zh.wikipedia.org/wiki/Google_Web_Server" target="_blank" rel="noopener">Google Web Server</a></li><li>NGINX, Inc.（已被<a href="https://zh.wikipedia.org/w/index.php?title=F5_Networks,_Inc.&action=edit&redlink=1" target="_blank" rel="noopener">F5 Networks, Inc.</a>收购）的NGINX</li><li><a href="https://zh.wikipedia.org/wiki/淘宝网" target="_blank" rel="noopener">淘宝网</a>（隶属于<a href="https://zh.wikipedia.org/wiki/阿里巴巴集团" target="_blank" rel="noopener">阿里巴巴集团</a>）改良自 <a href="https://zh.wikipedia.org/wiki/NGINX" target="_blank" rel="noopener">NGINX</a> 的 <a href="https://zh.wikipedia.org/wiki/Tengine" target="_blank" rel="noopener">Tengine</a></li><li><a href="https://zh.wikipedia.org/wiki/Lighttpd" target="_blank" rel="noopener">lighttpd</a></li><li><a href="https://zh.wikipedia.org/wiki/Cherokee_(Web服务器)" target="_blank" rel="noopener">Cherokee</a></li><li><a href="https://zh.wikipedia.org/wiki/Microsoft_Corporation" target="_blank" rel="noopener">Microsoft Corporation</a> 的 <a href="https://zh.wikipedia.org/wiki/FrontPage" target="_blank" rel="noopener">FrontPage</a></li></ul></li></ol></li></ul><h3 id="什么是URL？上述URL各个组成部分的名称和含义解释"><a href="#什么是URL？上述URL各个组成部分的名称和含义解释" class="headerlink" title="什么是URL？上述URL各个组成部分的名称和含义解释"></a><strong>什么是URL？上述URL各个组成部分的名称和含义解释</strong></h3><ul><li><p><strong>统一资源定位符</strong>（英语：<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator，缩写：<strong>URL</strong>，或称统一资源定位器、定位地址、URL地址<a href="https://zh.wikipedia.org/wiki/统一资源定位符#cite_note-1" target="_blank" rel="noopener">[1]</a>）俗称网页地址，简称<strong>网址</strong>，是<a href="https://zh.wikipedia.org/wiki/因特网" target="_blank" rel="noopener">因特网</a>上标准的资源的地址（Address），如同在网络上的门牌。</p></li><li><p>统一资源定位符的标准格式如下：</p><blockquote><p>[协议类型]: //服务器地址:端口号/资源层级UNIX文件路径文件名?查询#片段ID</p></blockquote><p>统一资源定位符的完整格式如下：</p><blockquote><p>[协议类型]: //访问资源需要的凭证信息@服务器地址:端口号/资源层级UNIX文件路径文件名?查询#片段ID</p></blockquote><p>其中[访问凭证信息]、[端口号]、[查询]、[片段ID]都属于选填项。</p></li></ul><p><strong>示例</strong></p><p>以“<a href="https://zh.wikipedia.org/w/index.php?title=Special:隨機頁面" target="_blank" rel="noopener"><em>https://zh.wikipedia.org:443/w/index.php?title=随机页面</em></a>”为例，其中：</p><ol><li><strong>https</strong>，是协议；</li><li><strong>zh.wikipedia.org</strong>，是服务器；</li><li><strong>443</strong>，是服务器上的网络端口号；</li><li><strong>/w/index.php</strong>，是路径；</li><li><strong>?title=Special:随机页面</strong>，是询问。</li></ol><h3 id="具体描述上述场景中包括哪几次HTTP交互？一对http请求（请求地址、请求头）和响应（响应头、返回内容）即算一次交互"><a href="#具体描述上述场景中包括哪几次HTTP交互？一对http请求（请求地址、请求头）和响应（响应头、返回内容）即算一次交互" class="headerlink" title="具体描述上述场景中包括哪几次HTTP交互？一对http请求（请求地址、请求头）和响应（响应头、返回内容）即算一次交互"></a><strong>具体描述上述场景中包括哪几次HTTP交互？一对http请求（请求地址、请求头）和响应（响应头、返回内容）即算一次交互</strong></h3><ul><li><ol><li>当用户填写了一个常见的用户名如：tom，提交后，浏览器弹出对话框，提示该用户名已被占用</li></ol></li></ul><pre><code>// 请求头POST  /s?ie=utf-8  HTTP/1.1 Host: 127.0.0.1 Cookie: 7facebcffbc7454ebf6b20de1fdbe038297c0cb914fa3557fdd81223b36ee751 Content-type: application/x-www-form-urlencoded User-Agent: chrome 83// 请求体username=admin&amp;password=admin// 响应行      HTTP/1.1  401  ERROR头      Content-Type: text/html;charset=utf-8        Content-length: 2048        Content-encoding: gzip// 响应体{&quot;code&quot;:401,&quot;message&quot;:&quot;密码错误&quot;}</code></pre><ul><li><ol start="2"><li>当用户终于按要求正确填写所有字段，提交后，页面跳转至网站首页</li></ol></li></ul><pre><code>// 请求头POST  /s?ie=utf-8  HTTP/1.1 Host: 127.0.0.1 Cookie: 7facebcffbc7454ebf6b20de1fdbe038297c0cb914fa3557fdd81223b36ee751 Content-type: application/x-www-form-urlencoded User-Agent: chrome 83// 请求体username=admin&amp;password=admin// 响应行      HTTP/1.1  200  OK头      Content-Type: text/html;charset=utf-8        Content-length: 2048        Content-encoding: gzip// 响应体*.css *.js *.html</code></pre><ul><li>3.当用户点击购买下单按钮，浏览器跳转至登录页面，提示用户登录</li></ul><pre><code>// 请求头POST  /s?ie=utf-8  HTTP/1.1 Host: 127.0.0.1 Cookie: 7facebcffbc7454ebf6b20de1fdbe038297c0cb914fa3557fdd81223b36ee751 Content-type: application/x-www-form-urlencoded User-Agent: chrome 83// 请求体username=admin&amp;password=admin// 响应行      HTTP/1.1  401  ERROR头      Content-Type: text/html;charset=utf-8        Content-length: 2048        Content-encoding: gzip// 响应体{&quot;code&quot;:401,&quot;message&quot;:&quot;未登录&quot;}&lt;html&gt;  ......登录页面&lt;/html&gt;</code></pre><ul><li>4.当用户填写正确的用户名和密码，并勾选”记住我“的选项，提交。页面跳转到下单页面</li></ul><pre><code>// 请求头POST  /s?ie=utf-8  HTTP/1.1 Host: 127.0.0.1 Cookie: 7facebcffbc7454ebf6b20de1fdbe038297c0cb914fa3557fdd81223b36ee751 Content-type: application/x-www-form-urlencoded User-Agent: chrome 83// 请求体username=admin&amp;password=admin// 响应行      HTTP/1.1  401  ERROR头      Content-Type: text/html;charset=utf-8        Content-length: 2048        Content-encoding: gzip// 响应体{&quot;code&quot;:200,&quot;message&quot;:&quot;登录成功&quot;, &quot;token&quot;:******}&lt;html&gt;  ......下单页面&lt;/html&gt;</code></pre><ul><li>5.几天后，小明再次浏览商品并下单，这次没有提示登录，而是直接看到了下单页面</li></ul><p>在进入登录页面的时候，首先会看看localStroage或cookie里面是否有相关信息，如果有相关信息，则直接发送请求跳转到相关页面</p><pre><code>// 请求头POST  /s?ie=utf-8  HTTP/1.1 Host: 127.0.0.1 Cookie: 7facebcffbc7454ebf6b20de1fdbe038297c0cb914fa3557fdd81223b36ee751 Content-type: application/x-www-form-urlencoded User-Agent: chrome 83// 请求体username=admin&amp;password=admin// 响应行      HTTP/1.1  401  ERROR头      Content-Type: text/html;charset=utf-8        Content-length: 2048        Content-encoding: gzip// 响应体{&quot;code&quot;:200,&quot;message&quot;:&quot;登录成功&quot;, &quot;token&quot;:******}&lt;html&gt;  ......具体内容&lt;/html&gt;</code></pre><h3 id="登录功能是采用何种技术实现的？存在哪些缺点或不足？"><a href="#登录功能是采用何种技术实现的？存在哪些缺点或不足？" class="headerlink" title="登录功能是采用何种技术实现的？存在哪些缺点或不足？"></a><strong>登录功能是采用何种技术实现的？存在哪些缺点或不足？</strong></h3><p>登录操作一般都会放在一个表单控件上面。一般表单有登录名、密码，<code>&lt;form&gt;&lt;/form&gt;</code>、<code>&lt;input&gt;</code>，表单所有信息用<code>&lt;form&gt;&lt;/form&gt;</code>包裹。用<code>&lt;form&gt;</code>包裹所有<code>&lt;input&gt;</code>输入框，当点击提交后，将会把<code>&lt;form&gt;</code>所包裹得所有<code>&lt;input&gt;</code>输入框的信息提交给后台的一个地址上。在这之后可以向服务端发送POST或GET请求，并把账号密码做为参数传输给后端。</p><p>但是不管是使用cookie还是session，使用token登录安全性更强。</p><p>登录后根据security的安全算法生成一个唯一的token值（基于JWT），然后存储到redis中，并设定过期时间，之后把token值返回前台，前台保存到localStorage中，然后每次访问的时候都需要提交token作为验证，验证通过则可以访问接口。</p><p><strong>使用token登录的好处</strong></p><ul><li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.</li><li>无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li><li>更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.</li><li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.</li><li>适用接口跨平台: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</li><li>CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。</li><li>性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.</li><li>不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.</li><li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）</li></ul><h3 id="什么是客户端检验与服务端校验，各自的优劣？"><a href="#什么是客户端检验与服务端校验，各自的优劣？" class="headerlink" title="什么是客户端检验与服务端校验，各自的优劣？"></a><strong>什么是客户端检验与服务端校验，各自的优劣？</strong></h3><p>服务器端验证是程序的安全保障，客户端验证是不能信任的，客户端提交的数据是可以自己更改的，在客户端的验证是很容易绕过的，直接建一个HTML文件，把表单提交地址写到你的地址上，再把验证语句去掉，那客户端验证就是摆设了。后端验证是为了保证数据满足业务条件(business invariants)；</p><p>客户端验证是为了尽可能地降低服务器端的负荷，把一些验证操作前置到客户端，使用简单且不需要提交到服务器端就可以验证,减少服务器负担,而且多么复杂(联动,计算,隐藏,显示,自动增加行等等)都可以验证。前端验证是为了提供更好的用户体验；</p><p>最明显的区别是不可能把所有的用户信息都写在客户端。客户端的验证一般是语法，或字符方面的验证，对客户的身份等验证都是在服务器端验证的，因为服务器端可以访问数据库。而客户端不能直接访问数据库部分。</p><h3 id="什么是客户端渲染与服务端渲染，各自的优劣？"><a href="#什么是客户端渲染与服务端渲染，各自的优劣？" class="headerlink" title="什么是客户端渲染与服务端渲染，各自的优劣？"></a><strong>什么是客户端渲染与服务端渲染，各自的优劣？</strong></h3><p>服务端渲染（Server-Side Rendering），是指由<strong>服务侧</strong>完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程。客户端渲染是在请求回数据后就已经开始渲染了，只是有些数据还没拿到，暂时没法渲染，不过大部分的页面内容我们都已经可以看到了，所以客户端渲染可以完成页面的局部刷新。例如JD的商品评论数据</p><p><strong>优点</strong></p><ol><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li><li>无需占用客户端资源，解析模板的工作完全交给后端来做，客户端只需要解析HTML页面。客户端的资源占用少。</li><li>后端生成静态化文件。即生成缓存片段，减少数据库查询的浪费时间。高效。</li><li>有利于SEO。因为在后端有完整的html页面，所以爬虫更容易爬取获得信息，更有利于seo。</li></ol><p><strong>缺点</strong></p><ol><li>可能需要向服务器请求多次数据，占用服务器资源。</li><li>不利于前后端分离，开发效率低。</li><li>一些常用的浏览器的 api 可能无法正常使用，比如 window，document，alert等，如果使用的话需要对运行环境加以判断。</li></ol><p><strong>客户端渲染</strong> 在浏览器中通过JS直接进行页面的渲染路由跳转等操作，与后端的交互主要为API微服务接口的数据调用。得到数据后在前端进行分析处理和界面生成展现。比较代表性的为React,Vue,Angular三大前端框架的SPA(Single Page Application)应用。 </p><p><strong>优点</strong></p><p>  1.前后端分离。前端专注UI，后端专注api开发。前端有更多选择性，不需要遵循后端特定 的模板。</p><p>  2.体验更好。</p><p><strong>缺点</strong></p><p>  1.前端响应较慢。客户端渲染，前端还需要进行拼接字符串的过程，需要耗费额外的时间，不 如服务器渲染的速度快。</p><p>  2.体验更好。比如，我们将网站做成SPA或者部分内容做成SPA，这样，尤其是移动端，可以使体验更接近于原生app。</p><p>  3.不利于SEO 搜索引擎优化，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据。</p><h2 id="语义-1"><a href="#语义-1" class="headerlink" title="语义"></a>语义</h2><ol><li>什么是语义标记？请以三类人群为例(正常人群、搜索引擎、视障人群等)，说明这些用户访问Web网的方式、工具与解析过程，以及使用语义标记的好处？</li></ol><p>语义化的标签，旨在让标签有自己的含义。</p><p>正常人群</p><ul><li>良好的语义HTML标记有助于提升网站对访客的易用性，例如：由于网页代码是结构化的，可以为用户提供网页搜索功能等交互功能。</li></ul><p>开发者</p><ul><li>代码结构清晰，方便阅读，代码更简洁，复用性更高，语义化的代码具有更好的亲和力，有利于团队合作开发。</li><li>逐渐使网页标准化，这个也许是以后工作时候应聘时遵循的标准。</li></ul><p>搜索引擎</p><ul><li>利于搜索引擎爬虫理解代码，有利于搜索引擎优化（SEO）。网站排名提升。</li></ul><p>视障人群</p><ul><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以语义的方式来渲染网页。</li></ul><p>2.说明HTML与SVG、MathML、VoiceML等的区别和共同点？</p><p> 共同点</p><ul><li>都是语义化标签</li><li>xml和html都是用于操作数据或数据结构，在结构上大致是相同的。</li></ul><p>区别</p><ul><li>MathML指“数学标记语言”，是XML语言的一个子集，用来在web网页，甚至部分软件中显示数学公式。简言之，就是使用特殊的类似HTML的标记在网页中显示数学公式。</li><li>VoiceXML是建立于XML 语言规范基础之上，是一种应用于语音浏览的<a href="https://baike.baidu.com/item/标记语言/5964436" target="_blank" rel="noopener">标记语言</a>。利用VoiceXML可以建立基于WEB的语音应用和服务。</li><li><strong>可缩放矢量图形</strong> (Scalable Vector Graphics，SVG)是 W3C 推出的基于 XML 的二维矢量图形标准。 SVG可以提供高质量的矢量图形渲染，同时由于支持 JavaScript 和文档对象模型，SVG图形通常具有强大的交互能力。</li><li>html是一种网页标记语言，用于文档的传输。</li><li>html使用固定的标记，XML没有固定的标记，XML可自定义标记。</li><li>Html标签是预定义的；XML标签是免费的、自定义的、可扩展的。</li><li>html是用来显示数据的；xml是用来描述数据、存放数据的，所以可以作为持久化的介质！Html将数据和显示结合在一起，在页面中把这数据显示出来；</li><li>xml不是HTML的替代品，xml和html是两种不同用途的语言。 XML 不是要替换 HTML；实际上XML 可以视作对 HTML 的补充。XML 和HTML 的目标不同HTML 的设计目标是显示数据并集中于数据外观，而XML的设计目标是描述数据并集中于数据的内容。</li></ul><p>3.请举出一个实例(包括标记名称与主要属性)，说明下列各类(注意：是一类，不是一个)标记的语义和典型用法：</p><ul><li><p>列表元素</p><ul><li>有序列表</li></ul><pre><code>&lt;ol&gt;    &lt;li&gt;Coffee&lt;/li&gt;    &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt;</code></pre><ul><li>无序列表</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">ul </span><span class="token punctuation">{</span>        <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">ul li </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">280</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表格元素</p></li></ul><pre><code>&lt;style&gt;    table {          border-collapse: collapse;          border-spacing: 0;    }    .pure-table caption {          color: #000;          font: italic 85%/1 arial, sans-serif;          padding: 1em 0;          text-align: center;    }&lt;/style&gt;&lt;table class=&quot;pure-table&quot;&gt;    &lt;caption&gt;        This is a caption.    &lt;/caption&gt;    &lt;thead&gt;        &lt;td&gt;...&lt;/td&gt;        &lt;td&gt;...&lt;/td&gt;    &lt;/thead&gt;    &lt;tr&gt;        &lt;td&gt;...&lt;/td&gt;        &lt;td&gt;...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;...&lt;/td&gt;        &lt;td&gt;...&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;...&lt;/td&gt;        &lt;td&gt;...&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><ul><li>块元素 block Element</li></ul><pre><code>&lt;div    style=&quot;float: left;height: 500px; width: 800px; text-align:center&quot;&gt;&lt;/div&gt;</code></pre><ul><li>内联元素 inline Element</li></ul><pre><code>&lt;span    style=&quot;float: left;height: 500px; width: 800px; text-align:center&quot;&gt;&lt;/span&gt;</code></pre><ul><li>其它语义类型，如多媒体元素、链接、框架等</li></ul><pre><code>&lt;a href=&quot;#&quot; style=&quot;background-color: yellow&quot;&gt;地崩山摧壮士死，然后天梯石栈相钩连。&lt;/a&gt;&lt;img src=&quot;img/2.png&quot; alt=&quot;&quot;&gt;&lt;video src=&quot;&quot; autoplay=&quot;autoplay&quot;&gt;&lt;/video&gt;</code></pre><h2 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;        &lt;title&gt;html form 演示&lt;/title&gt;        &lt;style type=&quot;text/css&quot;&gt;            fieldset {                margin-bottom:10px;            }        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;form name=&quot;formTest&quot; action=&quot;save.php&quot; method=&quot;post&quot;  onreset=&quot;alert(&#39;唉，又要重填&#39;)&quot; onsubmit=&quot;alert(&#39;我被送到服务端去啦！&#39;)&quot; enctype=&quot;multipart/form-data&quot;  &gt;    &lt;fieldset&gt;        &lt;legend&gt;text 文本框&lt;/legend&gt;            &lt;input type=&quot;text&quot; name=&quot;textTest&quot;            value=&quot;有七朵玫瑰花&quot; maxlength=&quot;9&quot;            size=&quot;20&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;输入了什么？&quot;            onclick=&quot;iknow(&#39;text&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;password 密码框&lt;/legend&gt;            &lt;input type=&quot;password&quot; name=&quot;passwordTest&quot; value=&quot;好一朵玫瑰花呀&quot;  maxlength=&quot;10&quot; size=&quot;20&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;输入了什么？&quot; onclick=&quot;iknow(&#39;password&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;textarea 多行文本框&lt;/legend&gt;            &lt;textarea name=&quot;textareaTest&quot;                cols=&quot;20&quot;                rows=&quot;10&quot; &gt;好一朵玫瑰花呀            &lt;/textarea&gt;            &lt;input type=&quot;button&quot; value=&quot;输入了什么？&quot; onclick=&quot;iknow(&#39;textarea&#39;)&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;执行我！&quot; onclick=&quot;eval(document.forms[0].textareaTest.value)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;Radio 单选按钮&lt;/legend&gt;            &lt;input type=&quot;radio&quot; name=&quot;radioTest&quot; checked=&quot;checked&quot;/&gt;            &lt;input type=&quot;radio&quot; name=&quot;radioTest&quot; /&gt;            &lt;input type=&quot;radio&quot; name=&quot;radioTest&quot;   /&gt;            &lt;input type=&quot;radio&quot; name=&quot;radioTest&quot; /&gt;            &lt;input type=&quot;button&quot; value=&quot;谁被选中了？&quot; onclick=&quot;iknow(&#39;radio&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;CheckBox 多选按钮&lt;/legend&gt;            &lt;input type=&quot;checkbox&quot; name=&quot;checkboxTest&quot; checked=&quot;checked&quot; /&gt;            &lt;input type=&quot;checkbox&quot; name=&quot;checkboxTest&quot; /&gt;            &lt;input type=&quot;checkbox&quot; name=&quot;checkboxTest&quot; /&gt;            &lt;input type=&quot;checkbox&quot; name=&quot;checkboxTest&quot; checked=&quot;checked&quot;/&gt;            &lt;input type=&quot;button&quot; value=&quot;谁被选中了？&quot; onclick=&quot;iknow(&#39;checkbox&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;ComBox 下拉框&lt;/legend&gt;            &lt;select name=&quot;comboxTest&quot;&gt;                &lt;option&gt;网络技术&lt;/option&gt;                &lt;option&gt;网络系统管理&lt;/option&gt;                &lt;option selected=&quot;true&quot;&gt;信息安全&lt;/option&gt;            &lt;/select&gt;            &lt;input type=&quot;button&quot; value=&quot;谁被选中了？&quot; onclick=&quot;iknow(&#39;combox&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;ListBox 列表框&lt;/legend&gt;            &lt;select name=&quot;listboxTest&quot; multiple=&quot;true&quot;&gt;                &lt;option&gt;网络技术&lt;/option&gt;                &lt;option selected=&quot;true&quot;&gt;网络系统管理&lt;/option&gt;                &lt;option selected=&quot;true&quot;&gt;信息安全&lt;/option&gt;            &lt;/select&gt;            &lt;input type=&quot;button&quot; value=&quot;谁被选中了？&quot; onclick=&quot;iknow(&#39;listbox&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;file 文件框&lt;/legend&gt;            &lt;input type=&quot;file&quot; name=&quot;fileTest&quot; size=&quot;30&quot; /&gt;            &lt;input type=&quot;button&quot; value=&quot;输入的文件信息？&quot; onclick=&quot;iknow(&#39;file&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;fieldset&gt;        &lt;legend&gt;hidden 隐藏框&lt;/legend&gt;            &lt;input type=&quot;hidden&quot; name=&quot;hiddenTest&quot; value=&quot;我是谁你看不见！&quot; size=&quot;30&quot; /&gt;            &lt;input type=&quot;button&quot; value=&quot;输入了什么？&quot; onclick=&quot;iknow(&#39;hidden&#39;)&quot;&gt;    &lt;/fieldset&gt;    &lt;input type=&quot;submit&quot; value=&quot;提交到服务端&quot;/&gt;    &lt;input type=&quot;reset&quot; value=&quot;重新填写&quot;/&gt;    &lt;/form&gt;    &lt;script type=&quot;text/javascript&quot; &gt;        function　iknow(sType){            var f=document.forms[0];            //var f=document.formTest;            switch(sType){                case &quot;text&quot;:                    alert(f.textTest.value);                    //f.textTest.value=&quot;这是第二个新的输入&quot;;                    break;                case &quot;password&quot;:                    alert(f.passwordTest.value);                    break;                case &quot;textarea&quot;:                    alert(f.textareaTest.value) ;                    break;                case &quot;radio&quot;:                    for (var i=0;i&lt;f.radioTest.length;i++)                        if (f.radioTest[i].checked == true)                            alert(&quot;第&quot;　+　(i+1)  +&quot;项被选中了！&quot;)                    break;                case &quot;checkbox&quot;:                    var rets = [];                    for(var i=0;i&lt;f.checkboxTest.length;i++){                        if (f.checkboxTest[i].checked == true)                            rets.push(i+1);                    }                    alert(&quot;第&quot;　+　rets.join(&#39;,&#39;)  +&quot;项被选中了！&quot;)                    break;                case &quot;combox&quot;:                    var i=f.comboxTest.selectedIndex                    alert(&quot;第&quot;　+ (i+1) + &quot;项被选中了:&quot;                    + f.comboxTest.options[i].text);                    break;                case &quot;listbox&quot;:                    var rets = [];                    for(var i=0;i&lt;f.listboxTest.length;i++)                        if (f.listboxTest.options[i].selected == true)                            rets.push(f.listboxTest.options[i].text);                    alert(&quot;被选中的项目:&quot;　+　rets.join(&#39;,&#39;)  )                    break;                case &quot;file&quot;:                    alert(f.fileTest.value)                    break;                case &quot;hidden&quot;:                    alert(f.hiddenTest.value)                }        }    &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;style type=&quot;text/css&quot;&gt;    .greybox{background:#e1e1e1;  border:solid 1px yellow;}    .bluebox{background:blue; border:solid 1px white;}    .redbox{background:red; border:solid 1px black;}    div {border:inherit;background:transparent;margin:5px;}    body{text-align:center;margin:0 auto;}    #top {}    #middle{}    #bottom{}    #mid_row1_col1{float:left;}    #mid_row1_col2{float:left;}    #mid_row1_col3{float:right;}    #mid_row1_col2_col1{float:left;}    #mid_row1_col2_col2{float:right;}    .clear{clear:both;border:none;height:1px;margin:0;padding:0}  &lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;greybox&quot; style=&quot;width:900px&quot;&gt;  &lt;div id=&quot;top&quot; class=&quot;redbox&quot; style=&quot;height:60px;&quot; &gt;    顶部  &lt;/div&gt;  &lt;div id=&quot;middle&quot; class=&quot;redbox&quot;&gt;    &lt;div id=&quot;mid_row1&quot; style=&quot;height:350px;&quot; &gt;      &lt;div id=&quot;mid_row1_col1&quot; class=&quot;greybox&quot; style=&quot;height:90%;width:20%&quot;&gt;        左侧栏      &lt;/div&gt;      &lt;div id=&quot;mid_row1_col2&quot; class=&quot;greybox&quot; style=&quot;height:90%;width:55%&quot;&gt;        &lt;h2&gt;主内容区域&lt;/h2&gt;        &lt;div id=&quot;mid_row1_col2_col1&quot; style=&quot;width:45%;height:40%;&quot;&gt;          主内容区第一列        &lt;/div&gt;        &lt;div id=&quot;mid_row1_col2_col2&quot; style=&quot;width:45%;height:40%;&quot;&gt;          主内容区第二列        &lt;/div&gt;        &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;      &lt;/div&gt;      &lt;div id=&quot;mid_row1_col3&quot; class=&quot;bluebox&quot; style=&quot;height:90%;width:20%&quot;&gt;        右侧栏      &lt;/div&gt;      &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;!-- end of mid_row1 --&gt;    &lt;div id=&quot;mid_row2&quot; style=&quot;height:100px;&quot; class=&quot;bluebox&quot;&gt;第二行&lt;/div&gt;    &lt;div id=&quot;mid_row3&quot; style=&quot;height:100px;&quot; class=&quot;bluebox&quot;&gt;第三行&lt;/div&gt;  &lt;/div&gt;  &lt;div id=&quot;bottom&quot; style=&quot;height:60px;&quot; class=&quot;redbox&quot;&gt;底部&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h2><p>解释下列名词，并举一代码实例，并给予注释或说明</p><ol><li>DOM与BOM</li></ol><ul><li><p>DOM称为文件对象模型（DocumentObjectModel，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。</p></li><li><p>DOM是HTML文档的内存中对象表示，它提供了使用JavaScript与网页交互的方式。DOM是节点的层次结构（或树），其中document节点作为根。</p></li><li><p>实际上DOM是以面向对象的方式来描述的文档模型。DOM定义了表示和修改文档所需的对象和这些对象的行为和属性以及这些对象之间的关系。</p></li><li><p>通过JavaScript，我们可以重构整个HTML文档。比如添加、移除、改变或重排页面上的项目。</p></li><li><p>要改变页面上的某个东西，JavaScript就需要获得对HTML文档中所有元素进行访问的入口。这个入口，连同对HTML元素进行添加、移动、改变或移除的方法和属性，都是通过文档对象模型来获得的（DOM）。</p></li><li><p><strong>BOM</strong>：Browser Object Model，即浏览器对象模型，提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。</p><p><strong>Browser对象</strong>：指BOM提供的多个对象，包括：Window、Navigator、Screen、History、Location等。</p><p>其中Window对象为顶层对象，其他对象都为Window对象的子对象。</p><p>2.CSS伪类与CSS伪元素</p></li></ul><ul><li><p>css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是    列表中的第一个元素。下面分别对伪类和伪元素进行解释。</p></li><li><p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通    过:hover来描述这个元素的状态。虽然它和普通的css类相似，可以为已有的元素添加样式，但是它只有处于dom树无法描述的状态下才能为元素添加样式，所以    将其称为伪类。</p></li><li><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p><p>3.Jquery</p></li><li><p>jQuery是一个快速、简洁的<a href="https://baike.baidu.com/item/JavaScript/321142" target="_blank" rel="noopener">JavaScript</a>框架。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript<a href="https://baike.baidu.com/item/设计模式/1212549" target="_blank" rel="noopener">设计模式</a>，优化<a href="https://baike.baidu.com/item/HTML/97049" target="_blank" rel="noopener">HTML</a>文档操作、事件处理、动画设计和<a href="https://baike.baidu.com/item/Ajax/8425" target="_blank" rel="noopener">Ajax</a>交互。</p><p>jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的<a href="https://baike.baidu.com/item/CSS选择器/2819686" target="_blank" rel="noopener">CSS选择器</a>，并且可对<a href="https://baike.baidu.com/item/CSS/5457" target="_blank" rel="noopener">CSS</a>选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如<a href="https://baike.baidu.com/item/IE/69103" target="_blank" rel="noopener">IE</a> 6.0+、FF 1.5+、<a href="https://baike.baidu.com/item/Safari/597" target="_blank" rel="noopener">Safari</a> 2.0+、Opera 9.0+等。 [1] </p><p>4.SCSS</p></li><li><p>SCSS即是SASS的新语法，是Sassy CSS的简写，是CSS3语法的超集，也就是说所有有效的CSS3样式也同样适合于SASS。</p><p>SASS是CSS3的一个扩展，增加了规则嵌套、变量、混合、选择器继承等等。通过使用命令行的工具或WEB框架插件把它转换成标准的、格式良好的CSS代码。</p><p>5.响应式设计</p></li><li><p>响应式设计（RWD，Responsive Web Design）是页面布局可以「响应」不同尺寸屏幕的设计方法。通常我们说起响应式设计都是针对网页设计的。同一个页面，随着屏幕尺寸的改变，自适应地改变页面布局。同时在数据发生改变的时候，浏览器响应数据改变展示数据。</p><p>6.媒体查询</p></li></ul><ul><li>使用 <code>@media</code>查询，可以针对不同的媒体类型定义不同的样式</li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><pre><code>// 如果浏览器窗口小于 500px, 背景将变为浅蓝色：@media only screen and (max-width: 500px) {    body {        background-color: lightblue;    }}</code></pre><p>  7.cookies</p><ul><li><p>某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过<a href="https://zh.wikipedia.org/wiki/加密" target="_blank" rel="noopener">加密</a>）。Cookie另一个典型的应用是当登录一个网站时，网站往往会请求用户输入用户名和密码，并且用户可以勾选“下次自动登录”。如果勾选了，那么下次访问同一网站时，用户会发现没输入用户名和密码就已经登录了。这正是因为前一次登录时，服务器发送了包含登录凭据（用户名加密码的某种<a href="https://zh.wikipedia.org/wiki/加密" target="_blank" rel="noopener">加密</a>形式）的Cookie到用户的硬盘上。第二次登录时，如果该Cookie尚未到期，浏览器会发送该Cookie，服务器验证凭据，于是不必输入用户名和密码就让用户登录了。</p><p>8.node.js</p></li><li><p><strong>Node.js</strong> 是能够在<a href="https://zh.wikipedia.org/wiki/伺服器" target="_blank" rel="noopener">服务器</a>端运行 <a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a> 的<a href="https://zh.wikipedia.org/wiki/開放原始碼" target="_blank" rel="noopener">开放源代码</a>、<a href="https://zh.wikipedia.org/wiki/跨平台" target="_blank" rel="noopener">跨平台</a><a href="https://zh.wikipedia.org/wiki/执行环境" target="_blank" rel="noopener">执行环境</a>。Node.js 采用 <a href="https://zh.wikipedia.org/wiki/Google" target="_blank" rel="noopener">Google</a> 开发的 <a href="https://zh.wikipedia.org/wiki/V8_(JavaScript引擎)" target="_blank" rel="noopener">V8</a> 执行代码，使用<a href="https://zh.wikipedia.org/wiki/事件驅動" target="_blank" rel="noopener">事件驱动</a>、<a href="https://zh.wikipedia.org/w/index.php?title=非阻塞&action=edit&redlink=1" target="_blank" rel="noopener">非阻塞</a>和<a href="https://zh.wikipedia.org/wiki/异步IO" target="_blank" rel="noopener">异步输入输出</a>模型等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于资料密集的即时应用程序。</p></li><li><p>Node.js 大部分基本模块都用 JavaScript 语言编写。在 Node.js 出现之前，JavaScript 通常作为客户端程序设计语言使用，以JavaScript 写出的程序常在用户的浏览器上执行。Node.js 的出现使 JavaScript 也能用于服务端编程。Node.js 含有一系列内置模块，使得程序可以脱离 <a href="https://zh.wikipedia.org/wiki/Apache_HTTP_Server" target="_blank" rel="noopener">Apache HTTP Server</a> 或 <a href="https://zh.wikipedia.org/wiki/IIS" target="_blank" rel="noopener">IIS</a>，作为独立服务器执行。</p><p>9.http协议与https协议</p></li><li><p>HTTP协议是<strong>超文本传输协议</strong>的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。</p></li><li><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。</p><p>10.事件驱动</p></li><li><p><strong>事件驱动程序设计</strong>（英语：<strong>Event-driven programming</strong>）是一种电脑<a href="https://zh.wikipedia.org/wiki/程式設計" target="_blank" rel="noopener">程序设计</a><a href="https://zh.wikipedia.org/wiki/模型" target="_blank" rel="noopener">模型</a>。这种模型的程序执行流程是由用户的动作（如<a href="https://zh.wikipedia.org/wiki/滑鼠" target="_blank" rel="noopener">鼠标</a>的按键，键盘的按键动作）或者是由其他程序的<a href="https://zh.wikipedia.org/wiki/訊息" target="_blank" rel="noopener">消息</a>来决定的。相对于批处理程序设计（batch programming）而言，程序执行的流程是由<a href="https://zh.wikipedia.org/wiki/程式設計師" target="_blank" rel="noopener">程序员</a>来决定。批处理（batch）的程序设计在初级程序设计教学课程上是一种方式。然而，事件驱动程序设计这种设计模型是在<a href="https://zh.wikipedia.org/w/index.php?title=互動程序&action=edit&redlink=1" target="_blank" rel="noopener">交互程序</a>（Interactive program）的情况下孕育而生的。</p><p>11.定时器</p></li><li><p>JavaScript提供定时执行代码的功能，叫做定时器（timer），主要由setTimeout()和setInterval()这两个函数来完成。它们向任务队列添加定时任务。</p><p>12.同步调用与异步调用</p></li><li><p>同步就是整个处理过程顺序执行，当各个过程都执行完毕，并返回结果。</p></li><li><p>异步调用则是只是发送了调用的指令，调用者无需等待被调用的方法完全执行完毕；而是继续执行下面的流程。</p><p>13.安全字体、网络字体、图标字体</p></li><li><p>由于运行的操作系统有所不同，浏览器会尽力提供一个看上去合适的字体。但是有些字体操作系统不能够提供，因此Web开发者要保证不论发生什么情况都能够提供一套字体进行展示。</p><p>14.Javascript与node.js</p></li><li><p>JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D/3D 动画，滚动播放的视频等等。</p><p>15.本地存储与服务端存储</p></li><li><p>浏览器端可以保存一些数据，需要的时候直接从本地获取，sessionStorage,localStorage和cookie都是由浏览器存储在本地的数据</p></li><li><p>服务器端也可以保存所有用户的数据，但需要的时候浏览器要向服务器请求数据。服务器端保存所有的用户的数据，所以服务器端的开销较大，而浏览器端保存则把不同用户需要的数据分布保存在用户各自的浏览器中。</p></li><li><p>浏览器端一般只用来存储小数据，而服务器可以存储大数据或小数据。服务器存储数据安全一些，浏览器只适合存储一般数据。</p><p>16.窗口与文档</p></li></ul><ul><li><p>DOM称为文件对象模型（DocumentObjectModel，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。</p></li><li><p>DOM是HTML文档的内存中对象表示，它提供了使用JavaScript与网页交互的方式。DOM是节点的层次结构（或树），其中document节点作为根。</p></li><li><p>实际上DOM是以面向对象的方式来描述的文档模型。DOM定义了表示和修改文档所需的对象和这些对象的行为和属性以及这些对象之间的关系。</p></li><li><p>通过JavaScript，我们可以重构整个HTML文档。比如添加、移除、改变或重排页面上的项目。</p></li><li><p>要改变页面上的某个东西，JavaScript就需要获得对HTML文档中所有元素进行访问的入口。这个入口，连同对HTML元素进行添加、移动、改变或移除的方法和属性，都是通过文档对象模型来获得的（DOM）。</p></li><li><p><strong>BOM</strong>：Browser Object Model，即浏览器对象模型，提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。</p><p><strong>Browser对象</strong>：指BOM提供的多个对象，包括：Window、Navigator、Screen、History、Location等。</p><p>其中Window对象为顶层对象，其他对象都为Window对象的子对象。</p><p>17.URL绝对地址与URL相对地址</p></li></ul><ul><li><p><strong>绝对URL</strong>（absolute URL 比如说一个完整的通信地址，包含国家，省，市，小区门牌号，姓名。） 包括指向目录或文件的完整信息，包括模式、主机名和路径。绝对url本身与被引用的文件实际位置无关，无论在哪个主机上的网页中，某一文件的绝对URL都是完全一样的。当引用别人服务器上的文件时，应该总是使用绝对URL。</p><p> <strong>相对URL</strong>，指出的位置是以信息提供者的位置为参照的。（假设A的位置标记为在B的向左十米，那么这个位置就是相对地址，相对于B的位置而言的）相对URL以包含URL本身的文件位置为参照点，描述目标文件的位置。因此，相对URL可以表达像“指向本页面同一目录的那个文件”的意思。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决mysql服务无法启动</title>
      <link href="/jie-jue-mysql-fu-wu-wu-fa-qi-dong.html"/>
      <url>/jie-jue-mysql-fu-wu-wu-fa-qi-dong.html</url>
      
        <content type="html"><![CDATA[<pre><code>mysqld --initialize --user=root --console</code></pre><pre><code>2021-12-01T03:25:37.412027Z 0 [System] [MY-013169] [Server] E:\Program Files\MySQL\bin\mysqld.exe (mysqld 8.0.26) initializing of server in progress as process 92762021-12-01T03:25:37.444360Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.2021-12-01T03:25:38.123056Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.2021-12-01T03:25:40.064248Z 0 [Warning] [MY-013746] [Server] A deprecated TLS version TLSv1 is enabled for channel mysql_main2021-12-01T03:25:40.065214Z 0 [Warning] [MY-013746] [Server] A deprecated TLS version TLSv1.1 is enabled for channel mysql_main2021-12-01T03:25:40.312941Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: swSO2!rWsG59</code></pre><pre><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;</code></pre><pre><code>Query OK, 0 rows affected (0.01 sec)</code></pre><pre><code>mysql -u root -p root</code></pre><pre><code>mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 10Server version: 8.0.26 MySQL Community Server - GPLCopyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</code></pre><p>成功</p><p>bug解决</p><pre><code>client does not support authentication</code></pre><pre><code>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;root&#39;;</code></pre><pre><code>Query OK, 0 rows affected (0.01 sec)</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Vue和elementUI制作一个登录界面</title>
      <link href="/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian.html"/>
      <url>/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>利用elementUI来进行界面的开发，利用Vue来实现路由跳转，Vue和elementUI是当今比较流行的一个开发框架。</p><h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><p><img src="/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png" alt></p><h3 id="依赖模块"><a href="#依赖模块" class="headerlink" title="依赖模块"></a>依赖模块</h3><p><strong>package.json</strong></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"sever"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"npm-install-package"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --hot"</span><span class="token punctuation">,</span>    <span class="token property">"pub"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.publish.config.js --mode production"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.config.js --mode production"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"element-ui"</span><span class="token operator">:</span> <span class="token string">"^2.15.5"</span><span class="token punctuation">,</span>    <span class="token property">"form-data"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"html2canvas"</span><span class="token operator">:</span> <span class="token string">"^1.3.2"</span><span class="token punctuation">,</span>    <span class="token property">"js-base64"</span><span class="token operator">:</span> <span class="token string">"^3.7.2"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">,</span>    <span class="token property">"vue-clipboard2"</span><span class="token operator">:</span> <span class="token string">"^0.3.1"</span><span class="token punctuation">,</span>    <span class="token property">"vue-router"</span><span class="token operator">:</span> <span class="token string">"^3.5.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.13.10"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.13.10"</span><span class="token punctuation">,</span>    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.21.1"</span><span class="token punctuation">,</span>    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.3"</span><span class="token punctuation">,</span>    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.1.5"</span><span class="token punctuation">,</span>    <span class="token property">"babel-plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"^6.23.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-stage-0"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span>    <span class="token property">"clean-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^5.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^7.32.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^7.17.0"</span><span class="token punctuation">,</span>    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^6.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.3.9"</span><span class="token punctuation">,</span>    <span class="token property">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^15.9.7"</span><span class="token punctuation">,</span>    <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.12"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.46.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.3"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>webpack.publish.config.js</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 导入 在内存中生成页面的webpack插件</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入删除文件夹的 插件</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入 webpack 这个模块</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入抽取CSS样式文件的插件</span><span class="token comment" spellcheck="true">// const extractTextPlugin = require('extract-text-webpack-plugin')</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入优化压缩CSS样式表的插件</span><span class="token keyword">const</span> optimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> VueLoaderPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 导入vue-loader</span><span class="token comment" spellcheck="true">// 使用Node语法，向外暴露配置对象，从而，让webpack运行的时候，加载指定的配置</span><span class="token comment" spellcheck="true">// 为什么可以使用Node语法？因为 webpack 这个工具，就是基于node构建的；</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这是项目的主入口文件</span>        <span class="token comment" spellcheck="true">// vendors: ['jquery'] // 这是第三方包的名称</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目的入口文件</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./student"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出路径</span>        filename<span class="token punctuation">:</span> <span class="token string">"js/[name].js"</span> <span class="token comment" spellcheck="true">// 输出文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包好的文件的数据配置</span>    devtool<span class="token punctuation">:</span> <span class="token string">"nosources-source-map"</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 插件配置节点</span>        <span class="token comment" spellcheck="true">// 创建一个 htmlWebpackPlugin 的实例对象</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定模板页面路径</span>            filename<span class="token punctuation">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定内存中生成的HTMl文件名称</span>            minify<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 表示提供压缩选项</span>                removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除页面中的注释</span>                collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 合并空白字符</span>                removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 移除属性节点上的引号</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定每次重新发布的时候，要先删除的文件夹</span>        <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token punctuation">:</span> <span class="token string">"css/vendors.css"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">optimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自动压缩CSS</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 用来配置 非JS文件对应的loader的</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 就是这些 非 JS 文件 和 loader 之间的对应关系</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(sa|sc|c)ss$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                        loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            publicPath<span class="token punctuation">:</span> <span class="token string">"../"</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token string">"css-loader"</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 创建处理 css 文件的 loader 匹配规则</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|jpe?g|gif)(\?.*)?$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">"url-loader?limit=7631&amp;name=images/[hash:8]-[name].[ext]"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 配置 处理 样式表中图片的 loader规则</span>            <span class="token comment" spellcheck="true">// 可以使用?给 url-loader传递参数，其中，有一个固定的参数，叫做 limit，表示图片的大小，需要给定一个 数值；</span>            <span class="token comment" spellcheck="true">// limit 给定的这个数值，是 图片的大小，单位是 Byte（字节）</span>            <span class="token comment" spellcheck="true">// 如果指定了 limit 参数，则只有图片的大小，小于给定的 值时候，才会转为base64格式的图片；否则，就不转换；</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 添加转换JS文件的loader，其中，必须把 node_modules 目录设置为 排除项，这样，在打包的时候，会忽略node_modules 目录下的所有JS文件；否则项目运行不起来！</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">"vue-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 解析Vue组件的第三方loader</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.ttf|eot#iefix|woff|woff2|eot|svg$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"fonts/[name].[hash:8].[ext]"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//项目设置打包到dist下的fonts文件夹下</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 处理 样式中字体文件路径的问题</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>        hints<span class="token punctuation">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 枚举</span>        maxAssetSize<span class="token punctuation">:</span> <span class="token number">30000000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 整数类型（以字节为单位）</span>        maxEntrypointSize<span class="token punctuation">:</span> <span class="token number">50000000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 整数类型（以字节为单位）</span>        assetFilter<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 提供资源文件名的断言函数</span>            <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".css"</span><span class="token punctuation">)</span> <span class="token operator">||</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p><strong>文件：src/router.js</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  路由规则模块</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token comment" spellcheck="true">// 导入路由相关的组件</span><span class="token keyword">import</span> signIn <span class="token keyword">from</span> <span class="token string">"./components/sign/signIn.vue"</span><span class="token keyword">import</span> signUp <span class="token keyword">from</span> <span class="token string">"./components/sign/signUp.vue"</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 路由规则</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/signIn"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> signIn <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/signUp"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> signUp <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导出路由对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p><strong>main.js</strong>入口文件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token comment" spellcheck="true">// 导入自己的 .vue 组件</span><span class="token comment" spellcheck="true">// 在这里，如果要在webpack中使用.vue组件，必须先安装对应的loader加载器，否则webpack处理不了这种文件</span><span class="token keyword">import</span> APP <span class="token keyword">from</span> <span class="token string">"../src/components/Sign.vue"</span><span class="token comment" spellcheck="true">// 导入路由模块</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router.js"</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token comment" spellcheck="true">// element ui</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token keyword">import</span> <span class="token string">"element-ui/lib/theme-chalk/index.css"</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>axios <span class="token operator">=</span> axios<span class="token comment" spellcheck="true">//引入Clipboard2</span><span class="token keyword">import</span> VueClipboard <span class="token keyword">from</span> <span class="token string">"vue-clipboard2"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueClipboard<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 安装路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> originalPush <span class="token operator">=</span> VueRouter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pushVueRouter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> originalPush<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>APP<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Sign.vue</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> template 中，只能有唯一的一个根元素 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>container<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 头部 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tittle"</span><span class="token operator">></span>教务—学业分享系统 <span class="token operator">|</span> 高校学业核验系统 <span class="token operator">|</span> 登录<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 内容 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>main<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ad_content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"font-size: 30px"</span><span class="token operator">></span>基于区块链<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>divider<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>divider<span class="token operator">></span>        <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">"font-size: 20px"</span><span class="token operator">></span>构建安全、可信、高效的新型教务—学业分享系统<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"log_content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"method_switch"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"signUp"</span> <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"codeIcon"</span> @click<span class="token operator">=</span><span class="token string">"byChange(0)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>企业账户注册<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"signIn"</span> <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"psIcon"</span> @click<span class="token operator">=</span><span class="token string">"byChange(1)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-lock"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>main<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 使用 JS Component 之前，先按需导入一下需要的组件</span><span class="token comment" spellcheck="true">// import { Toast } from "mint-ui";</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      flag<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      psIcon<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token string">"#5eacf0"</span><span class="token punctuation">,</span>        borderBottomColor<span class="token punctuation">:</span> <span class="token string">"#5eacf0"</span><span class="token punctuation">,</span>        borderBottomWidth<span class="token punctuation">:</span> <span class="token string">"2px"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      codeIcon<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        borderBottomColor<span class="token punctuation">:</span> <span class="token string">"#ccc"</span><span class="token punctuation">,</span>        borderBottomWidth<span class="token punctuation">:</span> <span class="token string">"1px"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">byChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>codeIcon<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codeIcon<span class="token punctuation">.</span>borderBottomColor <span class="token operator">=</span> <span class="token string">"#5eacf0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>psIcon<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>psIcon<span class="token punctuation">.</span>borderBottomColor <span class="token operator">=</span> <span class="token string">"#909399"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>codeIcon<span class="token punctuation">.</span>borderBottomWidth <span class="token operator">=</span> <span class="token string">"2px"</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>psIcon<span class="token punctuation">.</span>borderBottomWidth <span class="token operator">=</span> <span class="token string">"1px"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/signUp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>psIcon<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>psIcon<span class="token punctuation">.</span>borderBottomColor <span class="token operator">=</span> <span class="token string">"#5eacf0"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>codeIcon<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codeIcon<span class="token punctuation">.</span>borderBottomColor <span class="token operator">=</span> <span class="token string">"#909399"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>psIcon<span class="token punctuation">.</span>borderBottomWidth <span class="token operator">=</span> <span class="token string">"2px"</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>codeIcon<span class="token punctuation">.</span>borderBottomWidth <span class="token operator">=</span> <span class="token string">"1px"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/signIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">windowHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> de <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> <span class="token punctuation">(</span>de <span class="token operator">&amp;&amp;</span> de<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  directives<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//监听路由变化</span>    <span class="token function">$route</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"/signIn"</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">"/testSignIn"</span><span class="token punctuation">:</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">byChange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">"/signUp"</span><span class="token punctuation">:</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">byChange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//  console.log(to , from )</span>      <span class="token comment" spellcheck="true">// to , from 分别表示从哪跳转到哪，都是一个对象</span>      <span class="token comment" spellcheck="true">// to.path  ( 表示的是要跳转到的路由的地址 eg: /home );</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写在mounted或者activated生命周期内即可</span>    window<span class="token punctuation">.</span>onpageshow <span class="token operator">=</span> window<span class="token punctuation">.</span>onload <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//刷新时弹出提示</span>      <span class="token keyword">var</span> wh <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">windowHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".el-main"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> wh <span class="token operator">-</span> <span class="token number">80</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"/signIn"</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">"/testSignIn"</span><span class="token punctuation">:</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">byChange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">"/signUp"</span><span class="token punctuation">:</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">byChange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"jw_student_file"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"jw_ent_file"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://limkim.xyz/newEdu/student"</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"jw_student_file"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"jw_ent_file"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://limkim.xyz/newEdu/company"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">*</span> <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  padding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  text<span class="token operator">-</span>decoration<span class="token punctuation">:</span> none<span class="token punctuation">;</span>  list<span class="token operator">-</span>style<span class="token punctuation">:</span> none<span class="token punctuation">;</span>  outline<span class="token punctuation">:</span> none<span class="token punctuation">;</span>  box<span class="token operator">-</span>sizing<span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span><span class="token punctuation">}</span>body <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>header <span class="token punctuation">{</span>  background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>img<span class="token operator">/</span>logo2<span class="token punctuation">.</span>png<span class="token punctuation">)</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>  background<span class="token operator">-</span>size<span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>  background<span class="token operator">-</span>position<span class="token punctuation">:</span> 10px <span class="token number">0</span><span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> <span class="token number">0</span> 2px 4px 1px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  z<span class="token operator">-</span>index<span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 80px <span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>header <span class="token punctuation">.</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item <span class="token punctuation">{</span>  padding<span class="token punctuation">:</span> <span class="token number">0</span> 30px <span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>main <span class="token punctuation">{</span>  padding<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  min<span class="token operator">-</span>width<span class="token punctuation">:</span> 1440px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> #f5f5f6<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>tittle <span class="token punctuation">{</span>  height<span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  padding<span class="token operator">-</span>left<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  font<span class="token operator">-</span>size<span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* border-left: 1px solid ; */</span><span class="token punctuation">}</span><span class="token punctuation">.</span>ad_content <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token operator">%</span><span class="token punctuation">;</span>  max<span class="token operator">-</span>width<span class="token punctuation">:</span> 560px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 460px<span class="token punctuation">;</span>  margin<span class="token punctuation">:</span> 150px <span class="token number">0</span> <span class="token number">0</span> <span class="token number">17</span><span class="token operator">%</span><span class="token punctuation">;</span>  background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>img<span class="token operator">/</span>login_icon<span class="token punctuation">.</span>png<span class="token punctuation">)</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>  background<span class="token operator">-</span>size<span class="token punctuation">:</span> <span class="token number">75</span><span class="token operator">%</span><span class="token punctuation">;</span>  background<span class="token operator">-</span>position<span class="token punctuation">:</span> 50px 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>log_content <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>  position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  margin<span class="token punctuation">:</span> 110px <span class="token number">0</span> <span class="token number">0</span> 80px<span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token operator">%</span><span class="token punctuation">;</span>  max<span class="token operator">-</span>width<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> <span class="token number">0</span> 2px 15px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>method_switch <span class="token punctuation">{</span>  height<span class="token punctuation">:</span> 52px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>method_switch div <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>  margin<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">!</span>important<span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 52px<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token punctuation">:</span> 52px<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>  border<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  cursor<span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span>#signUp <span class="token punctuation">{</span>  border<span class="token operator">-</span>right<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>  bottom<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  border<span class="token operator">-</span>top<span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> #5eacf0<span class="token punctuation">;</span>  cursor<span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token punctuation">:</span> 44px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* .else span {    display: inline-block;    margin: 0 !important;    width: 300px;    text-align: center;} */</span><span class="token punctuation">.</span>el<span class="token operator">-</span>divider<span class="token operator">--</span>horizontal <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> 10px <span class="token number">0</span> <span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>signIn.vue</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"font-weight: 400; margin-bottom: 30px; color: #909399"</span><span class="token operator">></span>密钥文件登录<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> style<span class="token operator">=</span><span class="token string">"width: 100%; height: 40px"</span> onclick<span class="token operator">=</span><span class="token string">"path.click()"</span><span class="token operator">></span>        请选择密钥文件        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-upload el-icon--right"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> id<span class="token operator">=</span><span class="token string">"path"</span> style<span class="token operator">=</span><span class="token string">"display: none"</span> accept<span class="token operator">=</span><span class="token string">".json"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input        type<span class="token operator">=</span><span class="token string">"password"</span>        placeholder<span class="token operator">=</span><span class="token string">"请输入密钥"</span>        v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"code"</span>        style<span class="token operator">=</span><span class="token string">"width: 100%"</span>        prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-key"</span>        clearable        show<span class="token operator">-</span>password        disabled      <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 5px"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button        type<span class="token operator">=</span><span class="token string">"primary"</span>        @click<span class="token operator">=</span><span class="token string">"onSubmit()"</span>        style<span class="token operator">=</span><span class="token string">"width: 100%"</span>        <span class="token punctuation">:</span>loading<span class="token operator">=</span><span class="token string">"btnLoad"</span>      <span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link        type<span class="token operator">=</span><span class="token string">"info"</span>        <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span>        target<span class="token operator">=</span><span class="token string">"_blank"</span>        href<span class="token operator">=</span><span class="token string">"http://wpa.qq.com/msgrd?v=3&amp;uin=1625753207&amp;site=qq&amp;menu=yes&amp;hm"</span>      <span class="token operator">></span>遇到问题<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link type<span class="token operator">=</span><span class="token string">"info"</span> @click<span class="token operator">=</span><span class="token string">"test()"</span> style<span class="token operator">=</span><span class="token string">"color: #1890ff; margin-left: 5%;"</span> <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>测试登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link        type<span class="token operator">=</span><span class="token string">"info"</span>        @click<span class="token operator">=</span><span class="token string">"byHDU()"</span>        style<span class="token operator">=</span><span class="token string">"color: #1890ff; margin-left: calc(95% - 216px)"</span>        <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span>      <span class="token operator">></span>数字杭电登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//密钥</span>      btnLoad<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//登录按钮加载</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 测试登录，使用指定的学号和token</span>      <span class="token comment" spellcheck="true">// localStorage.setItem("jw_student_file", JSON.stringify({"token":"52bae146-f956-42f5-b3af-b9378710954a","staffID":"18271126"}))</span>      <span class="token comment" spellcheck="true">// window.location.href = "https://limkim.xyz/newEdu/student"</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/testSignIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">byHDU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://api.hduhelp.com/gormja_wrapper/oauth/request"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnLoad <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断企业密钥文件可用性</span>        <span class="token keyword">var</span> token <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          token<span class="token punctuation">.</span>FileID <span class="token operator">===</span> undefined <span class="token operator">||</span>          token<span class="token punctuation">.</span>CompanyCode <span class="token operator">===</span> undefined <span class="token operator">||</span>          token<span class="token punctuation">.</span>Name <span class="token operator">===</span> undefined <span class="token operator">||</span>          token<span class="token punctuation">.</span>AccountForm <span class="token operator">===</span> undefined <span class="token operator">||</span>          token<span class="token punctuation">.</span>PrivateKey <span class="token operator">===</span> undefined        <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"密钥文件错误, 请检查后重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>btnLoad <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"jw_ent_file"</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>btnLoad <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"../company"</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>el<span class="token operator">-</span>form <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> 70px 90px <span class="token number">0</span> 90px<span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">%</span> <span class="token operator">-</span> 180px<span class="token punctuation">)</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  padding<span class="token punctuation">:</span> 5px 5px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>footer <span class="token punctuation">{</span>  user<span class="token operator">-</span>select<span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>signUp.vue</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token string">"form"</span> <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"rules"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span> prop<span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input placeholder<span class="token operator">=</span><span class="token string">"请输入企业名称"</span> prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-s-custom"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"uname"</span> clearable maxlength<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>popover        placement<span class="token operator">=</span><span class="token string">"right-start"</span>        title<span class="token operator">=</span><span class="token string">"注意："</span>        width<span class="token operator">=</span><span class="token string">"200"</span>        trigger<span class="token operator">=</span><span class="token string">"hover"</span>        content<span class="token operator">=</span><span class="token string">"企业名由字母、数字以及汉字组成，区分大小写"</span>      <span class="token operator">></span>      <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-warning-outline"</span> style<span class="token operator">=</span><span class="token string">"cursor: pointer; color: #E6A23C"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>popover<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span> prop<span class="token operator">=</span><span class="token string">"eAddress"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input placeholder<span class="token operator">=</span><span class="token string">"请输入邮箱地址"</span> prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-message"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"eAddress"</span> clearable<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"com"</span> slot<span class="token operator">=</span><span class="token string">"append"</span> placeholder<span class="token operator">=</span><span class="token string">"请选择"</span> style<span class="token operator">=</span><span class="token string">" width: 140px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>option label<span class="token operator">=</span><span class="token string">"@qq.com"</span> value<span class="token operator">=</span><span class="token string">"@qq.com"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>option label<span class="token operator">=</span><span class="token string">"@163.com"</span> value<span class="token operator">=</span><span class="token string">"@163.com"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>option label<span class="token operator">=</span><span class="token string">"@gmail.com"</span> value<span class="token operator">=</span><span class="token string">"@gmail.com"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>popover        placement<span class="token operator">=</span><span class="token string">"right-start"</span>        title<span class="token operator">=</span><span class="token string">"注意："</span>        width<span class="token operator">=</span><span class="token string">"200"</span>        trigger<span class="token operator">=</span><span class="token string">"hover"</span>        content<span class="token operator">=</span><span class="token string">"请确保该邮箱真实可用，我们将会发送一条验证码至该邮箱，输入验证码才能完成验证"</span>      <span class="token operator">></span>      <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-warning-outline"</span> style<span class="token operator">=</span><span class="token string">"cursor: pointer; color: #E6A23C"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>popover<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item  style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span> prop<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input placeholder<span class="token operator">=</span><span class="token string">"请输入密码"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">'password'</span> prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-lock"</span> clearable maxlength<span class="token operator">=</span><span class="token string">"16"</span> show<span class="token operator">-</span>password<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>popover        placement<span class="token operator">=</span><span class="token string">"right-start"</span>        title<span class="token operator">=</span><span class="token string">"注意："</span>        width<span class="token operator">=</span><span class="token string">"200"</span>        trigger<span class="token operator">=</span><span class="token string">"hover"</span>        content<span class="token operator">=</span><span class="token string">"密码由6~14位字母、数字和唯一符号@组成,区分大小写"</span>      <span class="token operator">></span>      <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"reference"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-warning-outline"</span> style<span class="token operator">=</span><span class="token string">"cursor: pointer; color: #E6A23C"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>popover<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item  style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span> prop<span class="token operator">=</span><span class="token string">"code"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input placeholder<span class="token operator">=</span><span class="token string">"请输入验证码"</span> prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-key"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">'code'</span> clearable maxlength<span class="token operator">=</span><span class="token string">"6"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 10px"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"getCode()"</span> style<span class="token operator">=</span><span class="token string">"width: 120px;"</span> <span class="token punctuation">:</span>loading<span class="token operator">=</span><span class="token string">"btnLoad1"</span> <span class="token punctuation">:</span>disabled <span class="token operator">=</span> <span class="token string">"disabled1"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>placeholder<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"onSubmit()"</span> style<span class="token operator">=</span><span class="token string">"width: 165px;"</span> <span class="token punctuation">:</span>loading<span class="token operator">=</span><span class="token string">"btnLoad2"</span> <span class="token punctuation">:</span>disabled <span class="token operator">=</span> <span class="token string">"disabled2"</span><span class="token operator">></span>立即注册<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link style<span class="token operator">=</span><span class="token string">"margin-right: 170px"</span> type<span class="token operator">=</span><span class="token string">"info"</span> <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> href<span class="token operator">=</span><span class="token string">"http://wpa.qq.com/msgrd?v=3&amp;uin=1625753207&amp;site=qq&amp;menu=yes&amp;hm"</span><span class="token operator">></span>遇到问题<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link type<span class="token operator">=</span><span class="token string">"info"</span> <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span> @click<span class="token operator">=</span><span class="token string">"signIn"</span><span class="token operator">></span>立即登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> validateUname <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newUname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>newUname<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"用户名长度为6~10位，不能包含空格"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> zg <span class="token operator">=</span>  <span class="token regex">/^[0-9a-zA-Z]*$/</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>newUname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"用户名只能由数字和字母组成"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> validatePwd <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newpassword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>newpassword<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"密码长度为6~14位，不能包含空格"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> zg <span class="token operator">=</span>  <span class="token regex">/^[0-9a-zA-Z]*$/</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>newpassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> newPwd <span class="token operator">=</span> newpassword<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>zg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>newPwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"用户名只能由数字和字母组成"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> validateAdd <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eAddress <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> neweAddress <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eAddress<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>neweAddress<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">||</span>neweAddress<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eAddress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"请输入正确邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eAddress <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> validateCode <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newcode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>newcode<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"验证码为6位数字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> zg <span class="token operator">=</span>  <span class="token regex">/^\d+$/</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>newcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"验证码为6位数字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>      com<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      uname<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      code<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      eAddress<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      placeholder<span class="token punctuation">:</span> <span class="token string">"发送验证码"</span><span class="token punctuation">,</span>      btnLoad1<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      disabled1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      btnLoad2<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      disabled2<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validateUname<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validatePwd<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        eAddress<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validateAdd<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        code<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> validator<span class="token punctuation">:</span> validateCode<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">"blur"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">signIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/signIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eAddress <span class="token operator">===</span> <span class="token string">""</span><span class="token operator">||</span><span class="token keyword">this</span><span class="token punctuation">.</span>com <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请填写邮箱地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eAddress<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eAddress<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>disabled1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnLoad1 <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          method<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span> <span class="token string">"https://api.limkim.xyz/sendCode"</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            eAddress<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eAddress <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>com        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              message<span class="token punctuation">:</span> <span class="token string">"验证码发送成功,请注意查收"</span><span class="token punctuation">,</span>              type<span class="token punctuation">:</span> <span class="token string">"success"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">59</span>            <span class="token keyword">var</span> countDown <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              that<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> count <span class="token operator">+</span><span class="token string">"s后重发"</span>              count <span class="token operator">=</span> count <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                that<span class="token punctuation">.</span>placeholder <span class="token operator">=</span> <span class="token string">"发送验证码"</span><span class="token punctuation">;</span>                that<span class="token punctuation">.</span>disabled1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>countDown<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Wrong eAddress"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"邮箱已经注册过啦，换个试试吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>disabled1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          that<span class="token punctuation">.</span>btnLoad1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Email Error"</span><span class="token punctuation">)</span>          that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"出错啦,请检查邮箱地址后再试,或点击遇到问题联系站长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Ip Error"</span><span class="token punctuation">)</span>          that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"非法请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"出错啦,请稍后再试,或点击遇到问题联系站长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>btnLoad1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>disabled1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">===</span><span class="token string">""</span><span class="token operator">||</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">===</span><span class="token string">""</span><span class="token operator">||</span><span class="token keyword">this</span><span class="token punctuation">.</span>eAddress <span class="token operator">===</span><span class="token string">""</span><span class="token operator">||</span><span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">===</span><span class="token string">""</span><span class="token operator">||</span><span class="token keyword">this</span><span class="token punctuation">.</span>com <span class="token operator">===</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请将表单填写完成,不要偷懒哦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnLoad2 <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>disabled2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          method<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span> <span class="token string">"https://api.limkim.xyz/signUp"</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          uname<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uname<span class="token punctuation">,</span>          password<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>          eAddress<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eAddress <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>com<span class="token punctuation">,</span>          code<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              message<span class="token punctuation">:</span> <span class="token string">"注册成功！"</span><span class="token punctuation">,</span>              type<span class="token punctuation">:</span> <span class="token string">"success"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              that<span class="token punctuation">.</span>disabled2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              that<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/signIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Wrong Uname"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span>disabled2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户名已存在，换个试试吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Wrong Code"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span>disabled2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"验证码错误,请核对后再试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Wrong eAddress"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span>disabled2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"邮箱已经注册过啦，换个试试吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          that<span class="token punctuation">.</span>btnLoad2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"Ip Error"</span><span class="token punctuation">)</span>          that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"非法请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          that<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"出错啦,请稍后再试,或点击遇到问题联系站长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>btnLoad2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>disabled2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>el<span class="token operator">-</span>form <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> 50px 130px <span class="token number">0</span> 90px<span class="token punctuation">;</span>  width<span class="token punctuation">:</span> 340px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>  padding<span class="token punctuation">:</span> 5px 5px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>el<span class="token operator">-</span>input <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>footer <span class="token punctuation">{</span>  user<span class="token operator">-</span>select<span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token punctuation">.</span>el<span class="token operator">-</span>input<span class="token operator">-</span>group__append <span class="token punctuation">{</span>  padding<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>testSignIn.vue</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"font-weight: 400; margin-bottom: 30px; color:#909399"</span><span class="token operator">></span>测试登录<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input        placeholder<span class="token operator">=</span><span class="token string">"请输入学号"</span>        v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"uName"</span>        style<span class="token operator">=</span><span class="token string">"width: 300px;"</span>        prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-user-solid"</span>        clearable      <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 27px"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input        placeholder<span class="token operator">=</span><span class="token string">"请输入对应token"</span>        v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"token"</span>        style<span class="token operator">=</span><span class="token string">"width: 300px;"</span>        prefix<span class="token operator">-</span>icon<span class="token operator">=</span><span class="token string">"el-icon-key"</span>        clearable      <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item style<span class="token operator">=</span><span class="token string">"margin-bottom: 5px;"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button        type<span class="token operator">=</span><span class="token string">"primary"</span>        @click<span class="token operator">=</span><span class="token string">"onSubmit()"</span>        style<span class="token operator">=</span><span class="token string">"width: 300px;"</span>        <span class="token punctuation">:</span>loading<span class="token operator">=</span><span class="token string">"btnLoad"</span>      <span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link        type<span class="token operator">=</span><span class="token string">"info"</span>        <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span>        target<span class="token operator">=</span><span class="token string">"_blank"</span>        href<span class="token operator">=</span><span class="token string">"http://wpa.qq.com/msgrd?v=3&amp;uin=1625753207&amp;site=qq&amp;menu=yes&amp;hm"</span>      <span class="token operator">></span>遇到问题<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link        type<span class="token operator">=</span><span class="token string">"info"</span>        @click<span class="token operator">=</span><span class="token string">"byCode()"</span>        style<span class="token operator">=</span><span class="token string">"color: #1890ff; margin-left: 70px;"</span>        <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span>      <span class="token operator">></span>密钥登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>link        type<span class="token operator">=</span><span class="token string">"info"</span>        @click<span class="token operator">=</span><span class="token string">"byHDU()"</span>        style<span class="token operator">=</span><span class="token string">"color: #1890ff; margin-left: 20px;"</span>        <span class="token punctuation">:</span>underline<span class="token operator">=</span><span class="token string">"false"</span>      <span class="token operator">></span>数字杭电登录<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      uName<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      token<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      btnLoad<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">byCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/signIn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">byHDU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://api.hduhelp.com/gormja_wrapper/oauth/request"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>btnLoad <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uName<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uName<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"jw_student_file"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">,</span> <span class="token string">"staffID"</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请正确输入学号和token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"https://limkim.xyz/newEdu/student"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>el<span class="token operator">-</span>form <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> 70px 130px <span class="token number">0</span> 100px<span class="token punctuation">;</span>  width<span class="token punctuation">:</span> 340px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  padding<span class="token punctuation">:</span> 5px 5px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>footer <span class="token punctuation">{</span>  user<span class="token operator">-</span>select<span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian/result.png" alt></p><p><img src="/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian/company.png" alt></p><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><p><img src="/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian/logo2.png" alt></p><p><img src="/yong-vue-he-elementui-zhi-zuo-yi-ge-deng-lu-jie-mian/login_icon.png" alt></p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p>目前暂无时间写一个源码解析的博客，还需要过一段时间才能更新。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> element UI </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> element UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在file协议下读取本地json文件</title>
      <link href="/zai-file-xie-yi-xia-du-qu-ben-di-json-wen-jian.html"/>
      <url>/zai-file-xie-yi-xia-du-qu-ben-di-json-wen-jian.html</url>
      
        <content type="html"><![CDATA[<h1 id="在一般情况下请求本地json数据"><a href="#在一般情况下请求本地json数据" class="headerlink" title="在一般情况下请求本地json数据"></a>在一般情况下请求本地json数据</h1><p><strong>Python爬取股票json数据</strong></p><pre class="line-numbers language-Python"><code class="language-Python">import tushare as tstoken='15e164e74f082e80c989dfb93b1d937ee95b83ea78b2c5bf1d5db211'pro=ts.pro_api(token)df = pro.index_dailybasic(trade_date='20181018')df.to_json()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/zai-file-xie-yi-xia-du-qu-ben-di-json-wen-jian/DataFrame.png" alt></p><p><strong>引入jQuery</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"stock_data.json"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> stock_data <span class="token operator">=</span> data<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stock_data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现如下错误：</p><p><img src="/zai-file-xie-yi-xia-du-qu-ben-di-json-wen-jian/CORS.png" alt></p><p>这是因为此时jQuery是在file协议下请求本地数据的，但是跨源请求只支持协议的模式为:http, data, chrome-extension, edge, https, chrome-untrusted。</p><p>让我们来看看要请求的json数据格式</p><pre><code>{    &quot;ts_code&quot;: {        &quot;0&quot;: &quot;000001.SH&quot;,        &quot;1&quot;: &quot;000300.SH&quot;,        &quot;2&quot;: &quot;000905.SH&quot;,        &quot;3&quot;: &quot;399001.SZ&quot;,        &quot;4&quot;: &quot;399005.SZ&quot;,        &quot;5&quot;: &quot;399006.SZ&quot;,        &quot;6&quot;: &quot;399016.SZ&quot;,        &quot;7&quot;: &quot;399300.SZ&quot;,        &quot;8&quot;: &quot;000005.SH&quot;,        &quot;9&quot;: &quot;000006.SH&quot;,        &quot;10&quot;: &quot;000016.SH&quot;,        &quot;11&quot;: &quot;399905.SZ&quot;    },    &quot;trade_date&quot;: {        &quot;0&quot;: &quot;20181018&quot;,        &quot;1&quot;: &quot;20181018&quot;,        &quot;2&quot;: &quot;20181018&quot;,        &quot;3&quot;: &quot;20181018&quot;,        &quot;4&quot;: &quot;20181018&quot;,        &quot;5&quot;: &quot;20181018&quot;,        &quot;6&quot;: &quot;20181018&quot;,        &quot;7&quot;: &quot;20181018&quot;,        &quot;8&quot;: &quot;20181018&quot;,        &quot;9&quot;: &quot;20181018&quot;,        &quot;10&quot;: &quot;20181018&quot;,        &quot;11&quot;: &quot;20181018&quot;    },    &quot;total_mv&quot;: {        &quot;0&quot;: 31699180114564.0,        &quot;1&quot;: 29449418462967.0,        &quot;2&quot;: 5687430983317.0,        &quot;3&quot;: 10179054112565.0,        &quot;4&quot;: 3085045567981.0,        &quot;5&quot;: 1693944514908.0,        &quot;6&quot;: 2185432734692.0,        &quot;7&quot;: 29449418462967.0,        &quot;8&quot;: 1295146513074.0,        &quot;9&quot;: 589008238469.0,        &quot;10&quot;: 16101657858757.0,        &quot;11&quot;: 5687430983317.0    },    &quot;float_mv&quot;: {        &quot;0&quot;: 22966231985204.0,        &quot;1&quot;: 21842573432592.0,        &quot;2&quot;: 4465633892148.0,        &quot;3&quot;: 7705370463348.0,        &quot;4&quot;: 2228893363286.0,        &quot;5&quot;: 1083815980254.0,        &quot;6&quot;: 1703092728155.0,        &quot;7&quot;: 21842573432592.0,        &quot;8&quot;: 618617244719.0,        &quot;9&quot;: 509355526925.0,        &quot;10&quot;: 12779078542269.0,        &quot;11&quot;: 4465633892148.0    },    &quot;total_share&quot;: {        &quot;0&quot;: 4442798161247.0,        &quot;1&quot;: 3691970608877.0,        &quot;2&quot;: 881140150403.0,        &quot;3&quot;: 1088737425967.0,        &quot;4&quot;: 244211463062.0,        &quot;5&quot;: 128802865087.0,        &quot;6&quot;: 174493828078.0,        &quot;7&quot;: 3691970608877.0,        &quot;8&quot;: 168601053467.0,        &quot;9&quot;: 91344316299.0,        &quot;10&quot;: 2046429718322.0,        &quot;11&quot;: 881140150403.0    },    &quot;float_share&quot;: {        &quot;0&quot;: 3289875967605.0,        &quot;1&quot;: 2703135408430.0,        &quot;2&quot;: 724932684320.0,        &quot;3&quot;: 845773870058.0,        &quot;4&quot;: 179801475990.0,        &quot;5&quot;: 93587976448.0,        &quot;6&quot;: 140943430195.0,        &quot;7&quot;: 2703135408430.0,        &quot;8&quot;: 87261145444.0,        &quot;9&quot;: 80701448890.0,        &quot;10&quot;: 1608871537660.0,        &quot;11&quot;: 724932684320.0    },    &quot;free_share&quot;: {        &quot;0&quot;: 1243989478731.0,        &quot;1&quot;: 928883774793.0,        &quot;2&quot;: 415536426546.0,        &quot;3&quot;: 509473831228.0,        &quot;4&quot;: 110333344951.0,        &quot;5&quot;: 69877922054.0,        &quot;6&quot;: 95872144544.0,        &quot;7&quot;: 928883774793.0,        &quot;8&quot;: 60194793605.0,        &quot;9&quot;: 32822641439.0,        &quot;10&quot;: 377997983573.0,        &quot;11&quot;: 415536426546.0    },    &quot;turnover_rate&quot;: {        &quot;0&quot;: 0.38,        &quot;1&quot;: 0.27,        &quot;2&quot;: 0.82,        &quot;3&quot;: 0.88,        &quot;4&quot;: 0.85,        &quot;5&quot;: 1.5,        &quot;6&quot;: 1.06,        &quot;7&quot;: 0.27,        &quot;8&quot;: 0.76,        &quot;9&quot;: 0.46,        &quot;10&quot;: 0.14,        &quot;11&quot;: 0.82    },    &quot;turnover_rate_f&quot;: {        &quot;0&quot;: 1.01,        &quot;1&quot;: 0.79,        &quot;2&quot;: 1.44,        &quot;3&quot;: 1.46,        &quot;4&quot;: 1.39,        &quot;5&quot;: 2.01,        &quot;6&quot;: 1.56,        &quot;7&quot;: 0.79,        &quot;8&quot;: 1.1,        &quot;9&quot;: 1.14,        &quot;10&quot;: 0.6,        &quot;11&quot;: 1.44    },    &quot;pe&quot;: {        &quot;0&quot;: 11.92,        &quot;1&quot;: 11.17,        &quot;2&quot;: 18.03,        &quot;3&quot;: 17.48,        &quot;4&quot;: 21.43,        &quot;5&quot;: 29.56,        &quot;6&quot;: 18.86,        &quot;7&quot;: 11.17,        &quot;8&quot;: 12.74,        &quot;9&quot;: 7.65,        &quot;10&quot;: 10.01,        &quot;11&quot;: 18.03    },    &quot;pe_ttm&quot;: {        &quot;0&quot;: 11.13,        &quot;1&quot;: 10.47,        &quot;2&quot;: 16.65,        &quot;3&quot;: 16.16,        &quot;4&quot;: 19.55,        &quot;5&quot;: 27.04,        &quot;6&quot;: 17.93,        &quot;7&quot;: 10.47,        &quot;8&quot;: 12.58,        &quot;9&quot;: 7.09,        &quot;10&quot;: 9.33,        &quot;11&quot;: 16.65    },    &quot;pb&quot;: {        &quot;0&quot;: 1.28,        &quot;1&quot;: 1.3,        &quot;2&quot;: 1.51,        &quot;3&quot;: 1.93,        &quot;4&quot;: 2.73,        &quot;5&quot;: 3.2,        &quot;6&quot;: 2.72,        &quot;7&quot;: 1.3,        &quot;8&quot;: 1.19,        &quot;9&quot;: 1.13,        &quot;10&quot;: 1.17,        &quot;11&quot;: 1.51    }}</code></pre><h3 id="jsonp实现跨域请求"><a href="#jsonp实现跨域请求" class="headerlink" title="jsonp实现跨域请求"></a>jsonp实现跨域请求</h3><p>基本原理： 主要就是利用了 <code>script</code> 标签的<code>src</code>没有跨域限制来完成的。</p><p>执行过程：</p><ul><li>前端定义一个解析函数(如: <code>getJson = function (res) {}</code>)</li><li>通过<code>params</code>的形式包装<code>script</code>标签的请求参数，并且声明执行函数(如<code>cb=jsonpCallback</code>)</li><li>后端获取到前端声明的执行函数(<code>getJson</code>)，并以带上参数且调用执行函数的方式传递给前端</li><li>前端在<code>script</code>标签返回资源的时候就会去执行<code>getJson</code>并通过回调函数的方式拿到数据了。</li></ul><p>缺点是只能进行<code>GET</code>请求。</p><p><strong>实现代码</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// 定义函数</span>    <span class="token keyword">function</span> <span class="token function">getJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data 就是要取的json数据</span>        <span class="token keyword">let</span> myData <span class="token operator">=</span> data<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./stock_data.json?callback=getJson"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们还要改变Python存储数据的格式，要在json数据外面套上一个函数才能执行。因为script标签会默认引用的是一个脚本文件，如果里面只有json数据浏览器就解析不了，所以要套上一个函数。</p><pre class="line-numbers language-Python"><code class="language-Python">def func_json(function_name, dataframe, filename):    cancatString = string + '(' + dataframe.to_json() + ')'    f = open(filename, 'w')     f.write(cancatString)    f.close()func_json('getJson', df , 'stock_data.json')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看看此时的Json文件</p><pre><code>getJson({&quot;ts_code&quot;:{&quot;0&quot;:&quot;000001.SH&quot;,&quot;1&quot;:&quot;000300.SH&quot;,&quot;2&quot;:&quot;000905.SH&quot;,&quot;3&quot;:&quot;399001.SZ&quot;,&quot;4&quot;:&quot;399005.SZ&quot;,&quot;5&quot;:&quot;399006.SZ&quot;,&quot;6&quot;:&quot;399016.SZ&quot;,&quot;7&quot;:&quot;399300.SZ&quot;,&quot;8&quot;:&quot;000005.SH&quot;,&quot;9&quot;:&quot;000006.SH&quot;,&quot;10&quot;:&quot;000016.SH&quot;,&quot;11&quot;:&quot;399905.SZ&quot;},&quot;trade_date&quot;:{&quot;0&quot;:&quot;20181018&quot;,&quot;1&quot;:&quot;20181018&quot;,&quot;2&quot;:&quot;20181018&quot;,&quot;3&quot;:&quot;20181018&quot;,&quot;4&quot;:&quot;20181018&quot;,&quot;5&quot;:&quot;20181018&quot;,&quot;6&quot;:&quot;20181018&quot;,&quot;7&quot;:&quot;20181018&quot;,&quot;8&quot;:&quot;20181018&quot;,&quot;9&quot;:&quot;20181018&quot;,&quot;10&quot;:&quot;20181018&quot;,&quot;11&quot;:&quot;20181018&quot;},&quot;total_mv&quot;:{&quot;0&quot;:31699180114564.0,&quot;1&quot;:29449418462967.0,&quot;2&quot;:5687430983317.0,&quot;3&quot;:10179054112565.0,&quot;4&quot;:3085045567981.0,&quot;5&quot;:1693944514908.0,&quot;6&quot;:2185432734692.0,&quot;7&quot;:29449418462967.0,&quot;8&quot;:1295146513074.0,&quot;9&quot;:589008238469.0,&quot;10&quot;:16101657858757.0,&quot;11&quot;:5687430983317.0},&quot;float_mv&quot;:{&quot;0&quot;:22966231985204.0,&quot;1&quot;:21842573432592.0,&quot;2&quot;:4465633892148.0,&quot;3&quot;:7705370463348.0,&quot;4&quot;:2228893363286.0,&quot;5&quot;:1083815980254.0,&quot;6&quot;:1703092728155.0,&quot;7&quot;:21842573432592.0,&quot;8&quot;:618617244719.0,&quot;9&quot;:509355526925.0,&quot;10&quot;:12779078542269.0,&quot;11&quot;:4465633892148.0},&quot;total_share&quot;:{&quot;0&quot;:4442798161247.0,&quot;1&quot;:3691970608877.0,&quot;2&quot;:881140150403.0,&quot;3&quot;:1088737425967.0,&quot;4&quot;:244211463062.0,&quot;5&quot;:128802865087.0,&quot;6&quot;:174493828078.0,&quot;7&quot;:3691970608877.0,&quot;8&quot;:168601053467.0,&quot;9&quot;:91344316299.0,&quot;10&quot;:2046429718322.0,&quot;11&quot;:881140150403.0},&quot;float_share&quot;:{&quot;0&quot;:3289875967605.0,&quot;1&quot;:2703135408430.0,&quot;2&quot;:724932684320.0,&quot;3&quot;:845773870058.0,&quot;4&quot;:179801475990.0,&quot;5&quot;:93587976448.0,&quot;6&quot;:140943430195.0,&quot;7&quot;:2703135408430.0,&quot;8&quot;:87261145444.0,&quot;9&quot;:80701448890.0,&quot;10&quot;:1608871537660.0,&quot;11&quot;:724932684320.0},&quot;free_share&quot;:{&quot;0&quot;:1243989478731.0,&quot;1&quot;:928883774793.0,&quot;2&quot;:415536426546.0,&quot;3&quot;:509473831228.0,&quot;4&quot;:110333344951.0,&quot;5&quot;:69877922054.0,&quot;6&quot;:95872144544.0,&quot;7&quot;:928883774793.0,&quot;8&quot;:60194793605.0,&quot;9&quot;:32822641439.0,&quot;10&quot;:377997983573.0,&quot;11&quot;:415536426546.0},&quot;turnover_rate&quot;:{&quot;0&quot;:0.38,&quot;1&quot;:0.27,&quot;2&quot;:0.82,&quot;3&quot;:0.88,&quot;4&quot;:0.85,&quot;5&quot;:1.5,&quot;6&quot;:1.06,&quot;7&quot;:0.27,&quot;8&quot;:0.76,&quot;9&quot;:0.46,&quot;10&quot;:0.14,&quot;11&quot;:0.82},&quot;turnover_rate_f&quot;:{&quot;0&quot;:1.01,&quot;1&quot;:0.79,&quot;2&quot;:1.44,&quot;3&quot;:1.46,&quot;4&quot;:1.39,&quot;5&quot;:2.01,&quot;6&quot;:1.56,&quot;7&quot;:0.79,&quot;8&quot;:1.1,&quot;9&quot;:1.14,&quot;10&quot;:0.6,&quot;11&quot;:1.44},&quot;pe&quot;:{&quot;0&quot;:11.92,&quot;1&quot;:11.17,&quot;2&quot;:18.03,&quot;3&quot;:17.48,&quot;4&quot;:21.43,&quot;5&quot;:29.56,&quot;6&quot;:18.86,&quot;7&quot;:11.17,&quot;8&quot;:12.74,&quot;9&quot;:7.65,&quot;10&quot;:10.01,&quot;11&quot;:18.03},&quot;pe_ttm&quot;:{&quot;0&quot;:11.13,&quot;1&quot;:10.47,&quot;2&quot;:16.65,&quot;3&quot;:16.16,&quot;4&quot;:19.55,&quot;5&quot;:27.04,&quot;6&quot;:17.93,&quot;7&quot;:10.47,&quot;8&quot;:12.58,&quot;9&quot;:7.09,&quot;10&quot;:9.33,&quot;11&quot;:16.65},&quot;pb&quot;:{&quot;0&quot;:1.28,&quot;1&quot;:1.3,&quot;2&quot;:1.51,&quot;3&quot;:1.93,&quot;4&quot;:2.73,&quot;5&quot;:3.2,&quot;6&quot;:2.72,&quot;7&quot;:1.3,&quot;8&quot;:1.19,&quot;9&quot;:1.13,&quot;10&quot;:1.17,&quot;11&quot;:1.51}})</code></pre><p>可以看到已经套上函数了。</p><p><strong>查看结果</strong></p><p><img src="/zai-file-xie-yi-xia-du-qu-ben-di-json-wen-jian/success.png" alt></p><p>可以看到成功请求数据了。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><strong>Python代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tushare <span class="token keyword">as</span> ts<span class="token keyword">def</span> <span class="token function">func_json</span><span class="token punctuation">(</span>function_name<span class="token punctuation">,</span> dataframe<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    cancatString <span class="token operator">=</span> function_name <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> dataframe<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>     f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cancatString<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>token<span class="token operator">=</span><span class="token string">'15e164e74f082e80c989dfb93b1d937ee95b83ea78b2c5bf1d5db211'</span>pro<span class="token operator">=</span>ts<span class="token punctuation">.</span>pro_api<span class="token punctuation">(</span>token<span class="token punctuation">)</span>df <span class="token operator">=</span> pro<span class="token punctuation">.</span>index_dailybasic<span class="token punctuation">(</span>trade_date<span class="token operator">=</span><span class="token string">'20181018'</span><span class="token punctuation">)</span>func_json<span class="token punctuation">(</span><span class="token string">'getJson'</span><span class="token punctuation">,</span> df <span class="token punctuation">,</span> <span class="token string">'stock_data.json'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>html代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 定义函数</span>    <span class="token keyword">function</span> <span class="token function">getJson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data 就是要取的json数据</span>        <span class="token keyword">let</span> myData <span class="token operator">=</span> data<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./stock_data.json?callback<span class="token punctuation">=</span>getJson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> JavaScript </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令和错误排除</title>
      <link href="/git-command-notes.html"/>
      <url>/git-command-notes.html</url>
      
        <content type="html"><![CDATA[<h3 id="git上传文件"><a href="#git上传文件" class="headerlink" title="git上传文件"></a>git上传文件</h3><p>首先这是我的目录结构</p><pre><code>├─css├─font├─img├─js└─stockData    ├─general_picture    │  ├─index_dailybasic    │  └─SZ_daily_info    ├─HS300    ├─motion_index    ├─SSE    │  ├─bond_summary_sse_df    │  ├─stock_sse_deal_daily    │  └─stock_sse_deal_daily_df    └─SZZS</code></pre><p>很明显，stockData是一个大文件。</p><p>首先需要安装lfs，因为github不允许上传过大的文件，这个模块可以让我们上传大文件。</p><pre><code>git lfs install</code></pre><p>追踪所有文件</p><pre><code>git lfs track *</code></pre><pre><code>$ git lfs track *Tracking &quot;README.md&quot;&quot;css&quot; already supported&quot;font&quot; already supported&quot;img&quot; already supported&quot;index.html&quot; already supported&quot;js&quot; already supportedTracking &quot;stockData&quot;</code></pre><p>可以看到追踪到了stockData，但是我想要上传所有的文件，所有需要添加文件</p><pre><code>git add cssgit add fontgit add imggit add index.htmlgit add js</code></pre><p>最后push到github上面</p><pre><code>git push origin master</code></pre><pre><code>Uploading LFS objects: 100% (2/2), 3.3 KB | 0 B/s, done.Enumerating objects: 390, done.Counting objects: 100% (390/390), done.Delta compression using up to 8 threadsCompressing objects: 100% (387/387), done.Writing objects: 100% (388/388), 1.02 MiB | 1015.00 KiB/s, done.Total 388 (delta 110), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (110/110), done.To https://github.com/lovestories0eng/wecFinancial.git   3e16a3b..671156c  master -&gt; master(base) PS E:\JetBrains\bond\dist&gt; git lfs track *Tracking &quot;*&quot;Pattern * matches forbidden file .gitattributes. If you would like to track .gitattributes, modify .gitattributes manually.</code></pre><p><img src="/git-command-notes/success.png" alt></p><p>成功</p><h3 id="git-clone错误"><a href="#git-clone错误" class="headerlink" title="git clone错误"></a>git clone错误</h3><h4 id="SSL证书错误"><a href="#SSL证书错误" class="headerlink" title="SSL证书错误"></a>SSL证书错误</h4><pre><code>git clone https://github.com/maclxf/supermall.git</code></pre><p>报错：</p><pre><code>Cloning into &#39;supermall&#39;...fatal: unable to access &#39;https://github.com/maclxf/supermall.git/&#39;: OpenSSL SSL_read: Connection was reset, errno 10054</code></pre><p>这是服务器的SSL证书，没有经过第三方签名，所以报错。</p><p>如果是由网络不稳定和连接超时引起的。再次尝试的话，您仍然会报告一个错误。</p><p>解决方式如下：</p><pre><code>git config --global http.sslVerify &quot;false&quot;git init</code></pre><p>会看到如下结果</p><pre><code>Initialized empty Git repository in D:/Users/HP/Desktop/Projects/.git/</code></pre><p>重新clone</p><pre><code>git clone https://github.com/maclxf/supermall.git</code></pre><p>成功！</p><pre><code>Cloning into &#39;supermall&#39;...remote: Enumerating objects: 200, done.remote: Counting objects: 100% (200/200), done.remote: Compressing objects: 100% (152/152), done.Receiving objects:  88% (176/200)ote: Total 200 (delta 68), reused 139 (delta 27), pack-reused 0Receiving objects: 100% (200/200), 198.04 KiB | 594.00 KiB/s, done.Resolving deltas: 100% (68/68), done.</code></pre><h4 id="Time-Out"><a href="#Time-Out" class="headerlink" title="Time Out"></a>Time Out</h4><pre><code>git clone https://github.com/1977474741/vue-waterfall-rapid.git</code></pre><p>报错:</p><pre><code>Cloning into &#39;vue-waterfall-rapid&#39;...fatal: unable to access &#39;https://github.com/1977474741/vue-waterfall-rapid.git/&#39;: Failed to connect to github.com port 443: Timed out</code></pre><p>解决方式：找到C:\Windows\System32\drivers\etc\hosts文件，把与github有关的行注释掉即可。</p><p><img src="/git-command-notes/1.png" alt></p><p><img src="/git-command-notes/2.png" alt></p><p>取消代理设置</p><pre><code>git config --global --unset http.proxy</code></pre><p>再进行clone</p><pre><code>git clone https://github.com/itagn/vue-iresume.git</code></pre><pre><code>Cloning into &#39;vue-iresume&#39;...remote: Enumerating objects: 455, done.remote: Total 455 (delta 0), reused 0 (delta 0), pack-reused 455Receiving objects: 100% (455/455), 367.11 KiB | 402.00 KiB/s, done.Resolving deltas: 100% (192/192), done.</code></pre><p>问题解决！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax学习笔记</title>
      <link href="/6-ajaxnotes.html"/>
      <url>/6-ajaxnotes.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node环境部署"><a href="#Node环境部署" class="headerlink" title="Node环境部署"></a>Node环境部署</h1><h3 id="安装express后端框架"><a href="#安装express后端框架" class="headerlink" title="安装express后端框架"></a>安装express后端框架</h3><pre><code>npm install express</code></pre><pre><code>npm WARN saveError ENOENT: no such file or directory, open &#39;D:\Users\HP\Desktop\tech\前端开发\AjaxLearn\package.json&#39;npm WARN enoent ENOENT: no such file or directory, open &#39;D:\Users\HP\Desktop\tech\前端开发\AjaxLearn\package.json&#39;npm WARN AjaxLearn No descriptionnpm WARN AjaxLearn No repository field.npm WARN AjaxLearn No README datanpm WARN AjaxLearn No license field.+ express@4.17.1added 50 packages from 37 contributors in 2.194s</code></pre><h3 id="安装nodemon包"><a href="#安装nodemon包" class="headerlink" title="安装nodemon包"></a>安装nodemon包</h3><pre><code>npm install -g nodemon</code></pre><pre><code>D:\nodejs\nodemon -&gt; D:\nodejs\node_modules\nodemon\bin\nodemon.js&gt; nodemon@2.0.15 postinstall D:\nodejs\node_modules\nodemon&gt; node bin/postinstall || exit 0npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.2 (node_modules\nodemon\node_modules\chokidar\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ nodemon@2.0.15added 116 packages from 53 contributors in 4.331s(base) PS D:\Users\HP\Desktop\tech\前端开发\AjaxLearn&gt; nodemon  Usage: nodemon [nodemon options] [script.js] [args]  See &quot;nodemon --help&quot; for more.</code></pre><p>安装这个包是为了可以让服务端的代码改变之后，按Ctrl+s可以自动重启服务。</p><h3 id="运行express"><a href="#运行express" class="headerlink" title="运行express"></a>运行express</h3><p>在服务端的路径之下运行此服务端。</p><pre><code>nodemon server.js</code></pre><pre><code>[nodemon] 2.0.15[nodemon] to restart at any time, enter `rs`[nodemon] watching path(s): *.*[nodemon] watching extensions: js,mjs,json[nodemon] starting `node server.js`服务以及启动，8090  端口监听中</code></pre><p><strong>server.js文件</strong></p><pre><code>// 导入express模块const express = require(&#39;express&#39;);const app = express();app.get(&#39;/&#39;, (request, response) =&gt; {    // 设置响应    response.send(&#39;HELLO EXPRESS&#39;)});// 可以接受任何类型的请求app.all(&#39;/server&#39;, (request, response) =&gt; {    // 设置响应头，设置允许跨域    response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);    //响应头    response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;)        // 设置响应体    response.send(&#39;HELLO AJAX POST&#39;)});app.listen(8090, () =&gt; {    console.log(&quot;服务以及启动，8090  端口监听中&quot;)})</code></pre><p>在浏览器的url中输入</p><pre><code>localhost:8090</code></pre><p>可以看到后端服务已经可以开始运行了。</p><p><img src="/6-ajaxnotes/express.png" alt></p><h1 id="发送Ajax请求"><a href="#发送Ajax请求" class="headerlink" title="发送Ajax请求"></a>发送Ajax请求</h1><h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#result</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px <span class="token hexcode">#90b</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击发送请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建对象</span>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置请求方法和url</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8090/server?a=100&amp;b=200&amp;c=300'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 发送</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 事件绑定</span>            <span class="token comment" spellcheck="true">// on 当---时候</span>            <span class="token comment" spellcheck="true">// readystate 是 xhr 对象的属性 表示状态0（初始化） 1（open） 2（send） 3（部分结果） 4（全部结果）</span>            <span class="token comment" spellcheck="true">// change 改变</span>            xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断服务端是否返回了所有结果</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 判断相应装填码200 404 403 401 500</span>                    <span class="token comment" spellcheck="true">// 2开头一般都表示成功</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 处理结果 行 头 空行 体</span>                        <span class="token comment" spellcheck="true">// 1.相应行</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GET.html: 42 200</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GET.html: 43 OK</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>getAllResponseHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GET.html: 44 ƒ getAllResponseHeaders() { [native code] }</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// GET.html: 45 HELLO AJAX</span>                        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"测试失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端展示页面如下图所示</p><p><img src="/6-ajaxnotes/1.png" alt></p><p>点击按钮可以看到请求发送成功</p><p><img src="/6-ajaxnotes/2.png" alt></p><p>利用浏览器开发者工具，点击网络按钮，就可以看到具体的网路请求信息。</p><p><img src="/6-ajaxnotes/3.png" alt></p><p><img src="/6-ajaxnotes/4.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构走迷宫</title>
      <link href="/5.html"/>
      <url>/5.html</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode文件配置"><a href="#VSCode文件配置" class="headerlink" title="VSCode文件配置"></a>VSCode文件配置</h1><h3 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h3><pre><code>{    &quot;configurations&quot;: [        {            &quot;name&quot;: &quot;Win32&quot;,            &quot;compilerPath&quot;: &quot;D:/mingw64/bin/g++.exe&quot;, //这里改成自己的路径            &quot;includePath&quot;: [                &quot;${workspaceFolder}/**&quot;,                // 这里添加自己的OpenCV路径                &quot;D:/mingw64/include&quot;,                &quot;D:/OpenCV/opencv_build_cmake/install/include&quot;,                &quot;D:/OpenCV/opencv_build_cmake/install/include/opencv2&quot;            ],            &quot;defines&quot;: [                &quot;_DEBUG&quot;,                &quot;UNICODE&quot;,                &quot;_UNICODE&quot;            ],            &quot;cStandard&quot;: &quot;c11&quot;,            &quot;cppStandard&quot;: &quot;c++17&quot;,            &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;        }    ],    &quot;version&quot;: 4}</code></pre><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><pre><code>// https://code.visualstudio.com/docs/cpp/launch-json-reference{    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [    {        &quot;name&quot;: &quot;(gdb) Launch&quot;, // 配置名称，将会在启动配置的下拉菜单中显示        &quot;type&quot;: &quot;cppdbg&quot;, // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg        &quot;request&quot;: &quot;launch&quot;, // 请求配置类型，可以为launch（启动）或attach（附加）        &quot;program&quot;: &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;, // 将要进行调试的程序的路径        &quot;args&quot;: [], // 程序调试时传递给程序的命令行参数，一般设为空即可        &quot;stopAtEntry&quot;: false, // 设为true时程序将暂停在程序入口处，相当于在main上打断点        &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, // 调试程序时的工作目录，此为工作区文件夹；改成${fileDirname}可变为文件所在目录        &quot;environment&quot;: [], // 环境变量        &quot;externalConsole&quot;: true, // 使用单独的cmd窗口，与其它IDE一致；为false时使用内置终端        &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;, // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？        &quot;MIMode&quot;: &quot;gdb&quot;, // 指定连接的调试器，可以为gdb或lldb。        &quot;miDebuggerPath&quot;: &quot;D:/mingw64/bin/gdb.exe&quot;, // 调试器路径，Windows下后缀不能省略，Linux下则不要        &quot;setupCommands&quot;: [            { // 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google                &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                &quot;ignoreFailures&quot;: false            }        ],        &quot;preLaunchTask&quot;: &quot;Compile&quot; // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应    }]}</code></pre><h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><pre><code>// https://code.visualstudio.com/docs/editor/tasks{    &quot;version&quot;: &quot;2.0.0&quot;,    &quot;tasks&quot;: [        {        &quot;label&quot;: &quot;Compile&quot;, // 任务名称，与launch.json的preLaunchTask相对应        &quot;command&quot;: &quot;D:/mingw64/bin/g++.exe&quot;,   // 要使用的编译器，C++用g++        &quot;args&quot;: [            &quot;${file}&quot;,//当前文件名            &quot;-o&quot;,    // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out            &quot;${fileDirname}/${fileBasenameNoExtension}.exe&quot;,            &quot;-g&quot;,    // 生成和调试有关的信息            &quot;-m64&quot;, // 不知为何有时会生成16位应用而无法运行，加上此条可强制生成64位的            &quot;-Wall&quot;, // 开启额外警告            &quot;-static-libgcc&quot;,     // 静态链接libgcc，一般都会加上            &quot;-finput-charset=UTF-8&quot;,            &quot;-fexec-charset=GBK&quot;, // 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5            &quot;-std=c++17&quot;, // 要用的语言标准，根据自己的需要修改。c++可用c++14            // 扩展参数            // -I 头文件目录            // -L 库文件目录            // -l 库文件            // 这里换成自己的文件路径            &quot;-I&quot;, &quot;D:/OpenCV/opencv_build_cmake/install/include&quot;,            &quot;-I&quot;, &quot;D:/OpenCV/opencv_build_cmake/install/include/opencv2&quot;,            &quot;-L&quot;, &quot;D:/OpenCV/opencv_build_cmake/install/x64/mingw/lib&quot;,            &quot;-l&quot;, &quot;libopencv_calib3d420&quot;,            &quot;-l&quot;, &quot;libopencv_core420&quot;,            &quot;-l&quot;, &quot;libopencv_dnn420&quot;,            &quot;-l&quot;, &quot;libopencv_features2d420&quot;,            &quot;-l&quot;, &quot;libopencv_flann420&quot;,            &quot;-l&quot;, &quot;libopencv_highgui420&quot;,            &quot;-l&quot;, &quot;libopencv_imgcodecs420&quot;,            &quot;-l&quot;, &quot;libopencv_imgproc420&quot;,            &quot;-l&quot;, &quot;libopencv_ml420&quot;,            &quot;-l&quot;, &quot;libopencv_objdetect420&quot;,            &quot;-l&quot;, &quot;libopencv_photo420&quot;,            &quot;-l&quot;, &quot;libopencv_stitching420&quot;,            &quot;-l&quot;, &quot;libopencv_video420&quot;,            &quot;-l&quot;, &quot;libopencv_videoio420&quot;,            &quot;-l&quot;, &quot;opencv_core420&quot;,            &quot;-l&quot;, &quot;opencv_imgproc420&quot;,            &quot;-l&quot;, &quot;opencv_imgcodecs420&quot;,            &quot;-l&quot;, &quot;opencv_video420&quot;,            &quot;-l&quot;, &quot;opencv_ml420&quot;,            &quot;-l&quot;, &quot;opencv_highgui420&quot;,            &quot;-l&quot;, &quot;opencv_objdetect420&quot;,            &quot;-l&quot;, &quot;opencv_flann420&quot;,            &quot;-l&quot;, &quot;opencv_imgcodecs420&quot;,            &quot;-l&quot;, &quot;opencv_photo420&quot;,            &quot;-l&quot;, &quot;opencv_videoio420&quot;,            // 中文编码            // &quot;-finput-charset=GBK&quot;            ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西        &quot;type&quot;: &quot;process&quot;, // process是把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍        &quot;group&quot;: {            &quot;kind&quot;: &quot;build&quot;,            &quot;isDefault&quot;: true // 不为true时ctrl shift B就要手动选择了        },        &quot;presentation&quot;: {            &quot;echo&quot;: true,            &quot;reveal&quot;: &quot;always&quot;, // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档            &quot;focus&quot;: false,     // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义            &quot;panel&quot;: &quot;shared&quot;   // 不同的文件的编译信息共享一个终端面板        },        &quot;problemMatcher&quot;:&quot;$gcc&quot; // 捕捉编译时终端里的报错信息到问题面板中，修改代码后需要重新编译才会再次触发        // 本来有Lint，再开problemMatcher就有双重报错，但MinGW的Lint效果实在太差了；用Clang可以注释掉    }],}</code></pre><h1 id="迷宫算法"><a href="#迷宫算法" class="headerlink" title="迷宫算法"></a>迷宫算法</h1><pre><code>// Peter Pan// 21-10-25#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;unistd.h&gt;#include&lt;time.h&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;sys/timeb.h&gt;#include&lt;Windows.h&gt;#include&lt;opencv.hpp&gt;#include&lt;opencv2/opencv.hpp&gt;#include &lt;opencv2/highgui/highgui.hpp&gt;#define IN_MAXSIZE 100#define INCREASE 10#define SElemType Single_Point #define FALSE 0#define TURE 1#define a 0     //a表示路 #define b 1        //b表示墙 using std::random_shuffle;using namespace cv;typedef struct {    int x;    //行坐标     int y;      //列坐标     int direction = 1;     //方向}SElemType;typedef struct{    SElemType *base;    SElemType *top;    int stacksize;}SqStack;const int n = 181;const int k = n / 2;const int N = k * k;// 迷宫的大小 n * nint Init_Stack(SqStack *);     int Push(SqStack *,SElemType);         int Pop(SqStack *,SElemType *);  int* randperm(int limit);void DFSmaze(SElemType [],int [][n],int [][k]); void PrintMaze(int maze[][n]);void draw(int x,int y,int flag);bool MazePath(int maze[][n], SElemType start, SElemType end);int Pass(SElemType pos);bool StackEmpty(SqStack S);void NextPos(SElemType* curpos, int direction);void MakePrint(SElemType e, int print);void PrintPath(SqStack *);const int limit = 4; const int node_size = 4;const int sleep_time = 5;const int wait_key = 1;int* choices;int maze[n][n];struct timeb seed;// 长度 宽度 CV通道数Mat mat(node_size * n, node_size * n, CV_8UC3);int main(){    ftime(&amp;seed);    srand(seed.time * 1000 + seed.millitm);    choices = (int*)malloc(limit * sizeof(int));    choices = randperm(limit);    int i,j;    int smaze[k][k];    // 结构体数组     SElemType r[(k)*(k)];       // 把所有点都先初始化为墙。    for(i=0;i&lt;n;i++)        for(j=0;j&lt;n;j++)        {            maze[i][j] = b;        }    // 先使得横坐标和纵坐标都为偶数的变为路。    for(i=1;i&lt;n-1;i=i+2)        for(j=1;j&lt;n-1;j=j+2)        {            maze[i][j] = a;        }    // 定义起始点和结束点。    maze[1][0]=a;        maze[n-2][n-1]=a;    // 存储结构体数组的横坐标和纵坐标。    for(i=0;i&lt;k*k;i++)   //结构体数组赋初值，索引从零开始    {        r[i].x = i/k;        r[i].y = i%k;    }    // 数组中所有的初值全部置为FALSE，表示这些位置都没有被访问。    for(i=0;i&lt;k;i++)         for(j=0;j&lt;k;j++)            smaze[i][j] = FALSE;    // DFS首先访问的节点。    smaze[0][0] = TURE;  // 初始节点     DFSmaze(r,maze,smaze);    PrintMaze(maze);     // 打印生成迷宫     namedWindow(&quot;Maze&quot;);    for (int i = 0; i &lt; n; i++)    {        for (int j = 0; j &lt; n; j++)        {            if (maze[i][j] == 1)            {                draw(i, j, 1);            }            else if(maze[i][j] == 0)            {                draw(i, j, 2);            }        }    }    imshow(&quot;Maze&quot;, mat);    waitKey(1000);    printf(&quot;Please enter 0 to continue.\n&quot;);    SElemType start, end;    start.x = 1; start.y = 0;    end.x = n - 2; end.y = n - 1;    MazePath(maze, start, end);    system(&quot;pause&quot;);    return 0;}void PrintPath(SqStack * s) {    int count = 0;    while (s-&gt;base &lt; s-&gt;top)    {        printf(&quot;(%d, %d)--&gt;&quot;, s-&gt;base-&gt;x, s-&gt;base-&gt;y);        count++; s-&gt;base++;        if (count % 8 == 0)            printf(&quot;\n&quot;);    }}void PrintMaze(int maze[][n]) {    for(int i=0;i&lt;n;i++)     // 打印生成迷宫     {            for(int j=0;j&lt;n;j++)        {            printf(&quot;%d &quot;,maze[i][j]);        }        printf(&quot;\n&quot;);    }}int Init_Stack(SqStack *t)     //初始栈 {    t-&gt;base = (SElemType *)malloc(IN_MAXSIZE*sizeof(SElemType));    if(!(t-&gt;base))        return 0;    t-&gt;top = t-&gt;base;    t-&gt;stacksize = IN_MAXSIZE;    return 1;   }int Push(SqStack *t,SElemType e)   //入栈 {    if(t-&gt;top-t-&gt;base&gt;=t-&gt;stacksize)        {        t-&gt;base = (SElemType *)realloc(t-&gt;base,(t-&gt;stacksize+INCREASE)*sizeof(SElemType));        if(!t-&gt;base)            return 0;        t-&gt;top = t-&gt;base + t-&gt;stacksize;            t-&gt;stacksize += INCREASE;     }    *(t-&gt;top++) = e;    return 1;  } int Pop(SqStack *t,SElemType *e)     //出栈 {    if(t-&gt;top==t-&gt;base)        return 0;    *e = *(--t-&gt;top);    return 1;}/*循环弹栈，弹出一个，则将其二维数组中的FALSE改为TURE表示该元素已经被访问了。然后寻找其上下左右没有被访问的元素，找到一个，则将夹在两个蓝色圈中的墙打破，使其变成路，然后找到的未访问的元素入栈。*/void DFSmaze(SElemType r[N],int maze[n][n],int smaze[k][k]) //深度优先算法 {    SElemType e;             // 结构体变量e    SqStack s;               // 栈里面的存储的为结构体    if(Init_Stack(&amp;s)==1)      // 初始栈         printf(&quot;OK\n&quot;);     else        printf(&quot;Fail\n&quot;);          Push(&amp;s,r[0]);  //压栈r[0]    printf(&quot;initializeing maze......\n&quot;);    while(Pop(&amp;s,&amp;e))  //栈不空时，进行循环     {        choices = randperm(limit);        for(int i=0;i&lt;limit;i++) {            switch(choices[i]) {                //0，1，2，3分别对应上右下左                case 0: {                    // 点不能为外墙并且该结点未被访问过                    if(e.x - 1 &gt;= 0 &amp;&amp; smaze[e.x-1][e.y]!=TURE) // 上                    {                        // 该节点的状态变成访问过。                        smaze[e.x-1][e.y] = TURE;                        maze[2*e.x][2*e.y+1] = a; //打墙                         // 这里面r是一个一维结构体数组，每个结构分别存储X坐标和Y坐标。                        Push(&amp;s,r[(e.x-1)*k+e.y]);                        }                     break;                }                case 1: {                    if(e.y + 1 &lt; k  &amp;&amp; smaze[e.x][e.y+1]!=TURE) // 右                     {                        smaze[e.x][e.y+1] = TURE;                              maze[2*e.x+1][2*(e.y+1)] = a;                            Push(&amp;s,r[(e.x)*k+e.y+1]);                        }                    break;                }                case 2: {                    if(e.x + 1 &lt; k &amp;&amp; smaze[e.x+1][e.y]!=TURE) // 下                    {                        smaze[e.x+1][e.y] = TURE;                        maze[2*(e.x+1)][2*e.y+1] = a;                         Push(&amp;s,r[(e.x+1)*k+e.y]);                        }                    break;                }                case 3: {                    if(e.y - 1 &gt;= 0 &amp;&amp; smaze[e.x][e.y-1]!=TURE) // 左                     {                        smaze[e.x][e.y-1] = TURE;                        maze[2*e.x+1][2*e.y] = a;                        Push(&amp;s,r[(e.x)*k+e.y-1]);                        }                    break;                }            }        }    } } int* randperm(int limit){    Sleep(sleep_time);    ftime(&amp;seed);    srand(seed.time * 1000 + seed.millitm);    int* numbers;    numbers = (int*)malloc(limit * sizeof(int));    for (int i = 0; i &lt; limit; i++)        numbers[i] = i;    random_shuffle(numbers, numbers + limit);    return numbers;}void draw(int x,int y,int flag){    int red, green, black;    if (flag == 1)    {        red = 0, green = 0, black = 0;    }    else if (flag == 2)    {        red = 0, green = 255, black = 255;    }    else if (flag == 3)    {        red = 255, green = 0, black = 0;    }    else if (flag == 4)    {        red = 0, green = 255, black = 0;    }    // 每个点像素为50?50    for (int i = x * node_size; i &lt; x * node_size + node_size; i++)    {        for (int j = y * node_size; j &lt; y * node_size + node_size; j++)        {            mat.at&lt;Vec3b&gt;(i, j)[0] = black;            mat.at&lt;Vec3b&gt;(i, j)[1] = green;            mat.at&lt;Vec3b&gt;(i, j)[2] = red;        }    }}bool MazePath(int maze[][n], SElemType start, SElemType end){    SqStack S;    // SElemType* e;    Init_Stack(&amp;S);      // 初始栈     SElemType curpos = start;    // 初始点变为红色    draw(start.x, start.y, 3);    imshow(&quot;Maze&quot;, mat);    waitKey(wait_key);    Push(&amp;S, start);    int direction;    int curstep = 1;    int temp_direction;    do {        if(Pass(curpos)) {            if(curpos.x == end.x &amp;&amp; curpos.y == end.y) {                PrintPath(&amp;S);                return true;            }            // 加入当前道路            MakePrint(curpos, 2);            NextPos(&amp;curpos, curpos.direction);            // 如果路不通就往反方向走            temp_direction = (curpos.direction + 2) % 4;            if(maze[curpos.x][curpos.y] != 0) {                NextPos(&amp;curpos, temp_direction);                curpos.direction = curpos.direction % 4 + 1;                continue;            }            Push(&amp;S, curpos);            draw(curpos.x, curpos.y, 3);            imshow(&quot;Maze&quot;, mat);            waitKey(wait_key);            if(curpos.x == end.x &amp;&amp; curpos.y == end.y) {                PrintPath(&amp;S);                return true;            }            curstep++;        } else {            if(!StackEmpty(S)) {                // 从栈中循环谈栈                Pop(&amp;S, &amp;curpos);                direction = Pass(curpos);                if(direction) {                    curpos.direction = direction - 1;                }                // 该块标识为不能通过                MakePrint(curpos, 3);                draw(curpos.x, curpos.y, 4);                imshow(&quot;Maze&quot;, mat);                waitKey(wait_key);                while(!StackEmpty(S) &amp;&amp; curpos.direction == 5) {                    Pop(&amp;S, &amp;curpos);                    // 该块标识为不能通过                    MakePrint(curpos, 3);                }                if(curpos.direction &lt;= 4 &amp;&amp; Pass(curpos)) {                    curpos.direction++;                    Push(&amp;S, curpos);                    draw(curpos.x, curpos.y, 3);                    imshow(&quot;Maze&quot;, mat);                    waitKey(wait_key);                    NextPos(&amp;curpos, curpos.direction);                    Push(&amp;S, curpos);                    MakePrint(curpos, 2);                    draw(curpos.x, curpos.y, 3);                    imshow(&quot;Maze&quot;, mat);                    waitKey(wait_key);                    if(curpos.x == end.x &amp;&amp; curpos.y == end.y) {                        PrintPath(&amp;S);                        return true;                    }                }            }        }    } while(!StackEmpty(S));    return false;}int Pass(SElemType pos){    // 右    if(pos.y+1 &lt;= n-1 &amp;&amp; maze[pos.x][pos.y+1] == 0) {        printf(&quot;right\n&quot;);        return 1;    }    // 下    // attention    if(pos.x+1 &lt;= n-1 &amp;&amp; maze[pos.x+1][pos.y] == 0) {        printf(&quot;down\n&quot;);        return 2;    }    // 左    if(pos.y-1 &gt;= 1 &amp;&amp; maze[pos.x][pos.y-1] == 0) {        printf(&quot;left\n&quot;);        return 3;    }    // 上    if(pos.x-1 &gt;= 1 &amp;&amp; maze[pos.x-1][pos.y] == 0) {        printf(&quot;up\n&quot;);        return 4;    }    printf(&quot;No way!\n&quot;);    return 0;}bool StackEmpty(SqStack S) {    if(S.top == S.base)        return true;    else        return false;}// 1、2、3、4对应的搜索顺序分别为右、下、左、上void NextPos(SElemType* curpos, int direction) {    switch(direction) {        case 1: {            curpos-&gt;y++;            break;        }        case 2: {            curpos-&gt;x++;            break;        }        case 3: {            curpos-&gt;y--;            break;        }        case 4: {            curpos-&gt;x--;            break;        }    }}// 留下标记void MakePrint(SElemType e, int print){    maze[e.x][e.y] = print;}</code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/5/maze.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类实现卡牌操作</title>
      <link href="/4.html"/>
      <url>/4.html</url>
      
        <content type="html"><![CDATA[<h1 id="完成一个“卡牌操作”的类"><a href="#完成一个“卡牌操作”的类" class="headerlink" title="完成一个“卡牌操作”的类"></a>完成一个“卡牌操作”的类</h1><p>题目要求：</p><p>1.以面向对象方式写一个“卡牌操作”类：CardOperator</p><p>2.具有以下功能（类似扑克的功能）：</p><ul><li><p>功能1：初始化卡牌，initialCards（）</p></li><li><p>功能2：显示卡牌，showCards（）</p></li><li><p>功能3：洗牌（将牌打乱），shuffleCards（）</p></li><li><p>功能4：理牌（重新排序），rankCards（）</p></li></ul><p>3.写一个主控程序：MainProcess类（包含main函数）</p><ul><li><p>调用CardOperator完成各种卡牌操作</p></li><li><p>MainProcess类如下图（直接copy即可）</p></li></ul><p><img src="/4/MainProcess.png" alt></p><ul><li>输出结果如下图所示</li></ul><p><img src="/4/1.png" alt></p><p><img src="/4/2.png" alt></p><p><img src="/4/3.png" alt></p><h3 id="CardOperator-java"><a href="#CardOperator-java" class="headerlink" title="CardOperator.java"></a>CardOperator.java</h3><pre><code>package cn.itcast.train.demo2;public class CardOperater {    private static int numPerCards = 52;    //  private int cards_num;    //  private int[][] cards;    public int[][] CardOperater(int userInputCardsNum) {        int[][] cards = new int[userInputCardsNum][numPerCards];        for (int i = 0; i &lt; userInputCardsNum; i++) {            cards[i] = initialCards();        }        return cards;    }    public static int[] initialCards() {        int[] cardArray = new int[52];        for (int i = 0; i &lt; cardArray.length; i++) {            cardArray[i] = i;        }        return cardArray;    }    public static void showCards(int[][] cardArrays) {        int cardTypeNumber;        int cardValueNumber;        int count = 0;        String cardString;        for (int i = 0; i &lt; cardArrays.length; i++) {            System.out.printf(&quot;第%d副卡牌\n&quot;, i + 1);            for (int j = 0; j &lt; numPerCards; j++) {                cardTypeNumber = cardArrays[i][j] / 13;                cardValueNumber = cardArrays[i][j] % 13;                cardString = judge(cardTypeNumber, cardValueNumber);                if (count % 13 == 12)                    System.out.println(cardString);                else {                    System.out.printf(&quot;%s &quot;, cardString);                }                count++;            }            System.out.println();        }    }    private static String judge(int cardTypeNumber, int cardValueNumber) {        String cardType = &quot;&quot;;        String cardValue = &quot;&quot;;        switch (cardTypeNumber) {            case 0 -&gt; {                cardType = &quot;黑桃&quot;;            }            case 1 -&gt; {                cardType = &quot;红桃&quot;;            }            case 2 -&gt; {                cardType = &quot;方片&quot;;            }            case 3 -&gt; {                cardType = &quot;梅花&quot;;            }            default -&gt; {                System.out.println(&quot;初始化错误&quot;);                System.exit(2);            }        }        switch (cardValueNumber) {            case 0 -&gt; {                cardValue = &quot;A&quot;;            }            case 10 -&gt; {                cardValue = &quot;Jack&quot;;            }            case 11 -&gt; {                cardValue = &quot;Queen&quot;;            }            case 12 -&gt; {                cardValue = &quot;King&quot;;            }            default -&gt; {                cardValue = String.valueOf(cardValueNumber + 1);            }        }        return cardType + cardValue;    }    public int[][] shuffleCards(int[][] cardArray) {        for (int i = 0; i &lt; cardArray.length; i++) {            for (int j = 0;j &lt; numPerCards; j++) {                int index = (int) (Math.random() * (numPerCards));                int tmp = cardArray[i][j];                cardArray[i][j] = cardArray[i][index];                cardArray[i][index] = tmp;            }        }        return cardArray;    }    public static int[][] rankCards(int[][] cardArray) {        for (int[] ints : cardArray) {            qSort(ints, 0, ints.length - 1);        }        return cardArray;    }    public static void qSort(int[] array, int p, int r) {        int q;        if (p &lt; r) {            q = partition(array, p, r);            qSort(array, p, q - 1);            qSort(array, q + 1, r);        }    }    public static int partition(int[] array, int p, int r) {        int x = array[r];        int i = p - 1; // 指向的是比主元素小的位置        int temp;        for (int j=p;j&lt;=r-1;j++) {            if (array[j] &lt;= x) {                i++;                temp = array[i];                array[i] = array[j];                array[j] = temp;            }        }        temp = array[i+1];        array[i+1] = array[r];        array[r] = temp;        return i + 1;    }}</code></pre><h3 id="MainProcess-java"><a href="#MainProcess-java" class="headerlink" title="MainProcess.java"></a>MainProcess.java</h3><pre><code>package cn.itcast.train.demo2;public class MainProcess {    public static void main(String[] args) {        int[][] cards;        int[][] shuffledCards;        int[][] rankedCards;        CardOperater co = new CardOperater();        int userInputCardsNum = 3;        cards = co.CardOperater(userInputCardsNum);        System.out.printf(&quot;初始化%d副卡牌\n&quot;, userInputCardsNum);        CardOperater.showCards(cards);        System.out.println(&quot;打乱卡牌&quot;);        shuffledCards = co.shuffleCards(cards);        CardOperater.showCards(shuffledCards);        System.out.println(&quot;重新洗牌&quot;);        rankedCards = CardOperater.rankCards(shuffledCards);        CardOperater.showCards(rankedCards);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序和二分查找</title>
      <link href="/3.html"/>
      <url>/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Java二分查找的实现和递归实现快速排序。</p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p><strong>题目描述：</strong></p><p>输入整数n(n&gt;0&amp;&amp;n&lt;=100)，表示数组的长度</p><p> 输入n个正整数（递增），作为数组元素</p><p> 输入1个正整数，作为要查找的元素</p><p> 输出：利用二分查找输出要查找的元素在数组中的下标位置，若没有这个数则输出no </p><p>二分查找： 又叫折半查找，要求待查找的序列有序。每次取中间位置的值与待查关键字比较，如果中间位置的值比待查关键字大，则在前半部分循环这个查找的过程，如果中间位置的值比待查关键字小，则在后半部分循环这个查找的过程。直到查找到了为止，否则序列中没有待查的关键字。</p><pre><code>import java.util.Scanner;public class binarySearch {    public static void main(String[] args) {        int len;        int[] array = new int[100];        int toSearch;        int curpos;        boolean flag;        int low;        int high;        Scanner in = new Scanner(System.in);        while(in.hasNext()) {            len = in.nextInt();            for(int i=0; i&lt;len; i++) {                array[i] = in.nextInt();            }            toSearch = in.nextInt();            flag = false;            low = 0;            high = len - 1;            curpos = (low + high) / 2;            while(low &lt;= high) {                if(array[curpos] &gt; toSearch) {                    high = curpos - 1;                } else if (array[curpos] &lt; toSearch) {                    low = curpos + 1;                } else {                    flag = true;                    break;                }                curpos = (low + high) / 2;            }            if(!flag) {                System.out.println(&quot;no&quot;);                continue;            }            System.out.println(curpos);        }    }}</code></pre><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><strong>题目描述</strong></p><p>快速排序是常用排序算法，请参考以下资料实现对一组数组的升序快速排序 </p><p>思路： </p><ol><li><p>数组中选择一个数作为基准点（可以选第一个元素，也可以任意选择） </p></li><li><p>将所有大于基准点的放在基准点右侧，所有小于基准点的放在其左侧 </p></li><li><p>针对基准点左侧和右侧的区间，重复步骤1和2，直到各区间只有一个数 </p><p>参考网址：<a href="http://tools.jb51.net/aideddesign/paixu_ys" target="_blank" rel="noopener">http://tools.jb51.net/aideddesign/paixu_ys</a></p></li></ol><pre><code>import java.util.Scanner;public class quickSort {    public static void main(String[] args) {        Scanner in = new Scanner(System.in);        while(in.hasNext()) {            int len = in.nextInt();            int[] array = new int[len];            for (int i=0;i&lt;len;i++) {                array[i] = in.nextInt();            }            qSort(array, 0, array.length - 1);            for (int j=0;j&lt;len;j++) {                System.out.printf(&quot;%d &quot;, array[j]);            }            System.out.println();        }    }    public static void qSort(int[] array, int p, int r) {        int q;        if (p &lt; r) {            q = partition(array, p, r);            qSort(array, p, q - 1);            qSort(array, q + 1, r);        }    }    public static int partition(int[] array, int p, int r) {        int x = array[r];        int i = p - 1; // 指向的是比主元素小的位置        int temp;        for (int j=p;j&lt;=r-1;j++) {            if (array[j] &lt;= x) {                i++;                temp = array[i];                array[i] = array[j];                array[j] = temp;            }        }        temp = array[i+1];        array[i+1] = array[r];        array[r] = temp;        return i + 1;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署Python-Flask后端</title>
      <link href="/2.html"/>
      <url>/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker环境部署入门"><a href="#docker环境部署入门" class="headerlink" title="docker环境部署入门"></a>docker环境部署入门</h1><p>最近导师要求将自己的后端环境打包成一个容器上传到阿里云服务器上面。要装成容器的原因是服务器上面的配置环境是很复杂的，为此就要单独配置一个环境来满足要求。</p><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h3><pre><code># Docker image for flask python run# VERSION 1.0# Author: PSH# 基础镜像使用python:3.7FROM python:3.7# 更换镜像源RUN echo &quot;&quot;&gt;sources.list  &amp;&amp; \    echo &quot;deb http://mirrors.163.com/ubuntu/ artful main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb http://mirrors.163.com/ubuntu/ artful-security main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb http://mirrors.163.com/ubuntu/ artful-updates main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb http://mirrors.163.com/ubuntu/ artful-proposed main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb http://mirrors.163.com/ubuntu/ artful-backports main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb-src http://mirrors.163.com/ubuntu/ artful main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb-src http://mirrors.163.com/ubuntu/ artful-security main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb-src http://mirrors.163.com/ubuntu/ artful-updates main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb-src http://mirrors.163.com/ubuntu/ artful-proposed main restricted universe multiverse&quot;&gt;&gt;sources.list  &amp;&amp; \    echo &quot;deb-src http://mirrors.163.com/ubuntu/ artful-backports main restricted universe multiverse&quot;&gt;&gt;sources.list# 更新安装源RUN sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list \    &amp;&amp; apt-get clean \    &amp;&amp; apt-get update# 将服务器 requirements.txt和app.py 文件复制到 容器 /目录下COPY requirements.txt /COPY app.py /# 指定容器工作目录为 /WORKDIR /# 安装 项目依赖RUN pip install --user -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple# 安装gcc编译器RUN apt-get -y install gcc mono-mcs &amp;&amp; \    rm -rf /var/lib/apt/lists/*# 下载金融量化工具TA-LibRUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz  &amp;&amp; \    tar -xvf ta-lib-0.4.0-src.tar.gz  &amp;&amp; \    cd ta-lib  &amp;&amp; \    ./configure --prefix=/usr &amp;&amp; \    make &amp;&amp; \    make install  &amp;&amp; \    pip install TA-Lib# 安装vim和lsof工具并更新包RUN apt-get update &amp;&amp; \    apt-get install apt-file &amp;&amp; \    apt-file update &amp;&amp; \    apt-get install vim &amp;&amp; \    apt-get install lsofENTRYPOINT [&quot;python&quot;]CMD [&quot;app.py&quot;]# 编译# docker build -t quant/service .# run，将宿主机的5000端口映射到docker的5050端口# docker run -it -d --name quant -p 5000:5050 quant/service</code></pre><h3 id="app-py文件"><a href="#app-py文件" class="headerlink" title="app.py文件"></a>app.py文件</h3><pre><code># encoding:utf-8from flask import Flask, request, jsonifyfrom flask_cors import CORSapp = Flask(__name__)CORS(app, resources=r&#39;/*&#39;)  # 注册CORS, &quot;/*&quot; 允许访问所有api@app.route(&#39;/&#39;, methods=[&quot;GET&quot;, &quot;POST&quot;])def motion_index():    return &quot;Hello Docker!&quot;if __name__ == &#39;__main__&#39;:    app.run(debug=True, host=&quot;0.0.0.0&quot;, port=5050)</code></pre><p>注意，由于是将文件在docker中的linux环境运行，所以端口号不是<strong>127.0.0.1</strong>而是<strong>0.0.0.0</strong>。</p><p>这样的话，在浏览器的url中输入</p><pre><code>localhost:5000</code></pre><p>就可以访问到数据了</p><h2 id="docker启动错误解决"><a href="#docker启动错误解决" class="headerlink" title="docker启动错误解决"></a>docker启动错误解决</h2><p><img src="/2/error1.png" alt></p><p><img src="/2/error2.png" alt></p><p>以管理员方式打开CMD, 运行<code>netsh winsock reset</code> 后, 再次启动Docker就可以了。</p><p><img src="/2/3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建个人博客超详细教程</title>
      <link href="/1.html"/>
      <url>/1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png" alt></p><p><font color="magenta" size="4"><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color="red" size="4"> V：weixin_psh263，QQ:1494121350</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p></li><li><p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p></li><li><p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p></li></ul><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" title="为什么你应该（从现在开始就）写博客" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p><p><a href="https://www.zhihu.com/question/19916345" title="为什么要自建博客？" target="_blank" rel="noopener">《为什么要自建博客？》</a>   (By 知乎)</p><p><a href="https://www.cnblogs.com/jhzhu/p/3893297.html" title="我为什么写博客" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）</p><p>我们需要知道搭建博客要用到的框架。<font color="red" size="3">Hexo</font>是高效的静态站点生成框架，它基于<font color="red" size="3">Node.js</font>。我们使用<font color="red" size="3">MarkDown</font>在本地编辑我们的博客文章，通过<font color="red" size="3">Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><ul><li><strong>快速搭建</strong></li><li>安装<font color="red" size="3">Node.js</font></li><li>添加国内镜像</li><li>安装<font color="red" size="3">Git </font></li><li>注册<font color="red" size="3">Github</font>账号</li><li>创建<font color="red" size="3">Git</font>仓库</li><li>安装<font color="red" size="3">Hexo</font> </li><li>配置本地<font color="red" size="3">Hexo</font></li><li>连接<font color="red" size="3">Github</font>与本地 </li><li>写文章、发布文章 </li><li><font color="red" size="3">MarkDown</font>文章编辑器说明</li><li>配置个性化域名</li><li>更换自己喜欢的<font color="red" size="3">Hexo</font>主题</li><li>我的博客源代码</li><li>结语</li></ul><hr><h1 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h1><p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p><p>在这里以我的博客为例。</p><h2 id="一、下载博客源代码"><a href="#一、下载博客源代码" class="headerlink" title="一、下载博客源代码"></a>一、下载博客源代码</h2><p>大家可以直接素质二连，<font color="red" size="3">Star&amp;Fork</font>参考博客源代码：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png" alt></p><p><strong>第一种</strong>：直接<font color="red" size="3">DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p><p><strong>第二种</strong>：如果你已经安装了<a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">Git</a>，就可以右键单击<font color="red" size="3">Come Bash Here</font>运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:MUYIio/hexo-themes-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有文件下载到本地，这个复杂一点。</p><h2 id="二、修改博客文档配置"><a href="#二、修改博客文档配置" class="headerlink" title="二、修改博客文档配置"></a>二、修改博客文档配置</h2><p>首先将我们下载的博客源代码解压，然后修改主要配置：</p><ul><li>根目录配置文件<font color="red" size="3">_config.yml</font>和主题目录配置文件<font color="red" size="3">_config.yml</font>中修改个人信息。</li><li>根目录配置文件中修改<font color="red" size="3">deploy</font>一栏的<font color="red" size="3">repository</font>。</li><li>根目录配置文件中修改<font color="red" size="3">baidu_url_submit</font>一栏的<font color="red" size="3">token</font>。</li><li>主题配置文件中修改<font color="red" size="3">gitalk</font>一栏，修改方法见正文。</li></ul><p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p><p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p><p><strong>本地环境搭建好之后会生成的文件：</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png" alt></p><p>然后直接把<font color="red" size="3">Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png" alt></p><p>然后在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>点击输入以下命令上传就可以了：</p><pre><code>hexo cleanhexo ghexo d</code></pre><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>了解一下什么是<font color="red" size="3">Node.js</font>：</p><blockquote><p><font color="red" size="3">Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></blockquote><p>需要用到的命令：</p><pre><code>$ git --version$ node -v$ npm -v</code></pre><p><a href="https://nodejs.org/en/download/" title="Node.js" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color="red" size="3">Next</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png" alt></p><p>检验是否安装成功：<br>按<font color="red" size="3">Win+R</font>打开命令提示符，输入<font color="red" size="3">node -v</font>和<font color="red" size="3">npm -v</font>，如果出现版本号，那么就安装成功了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png" alt></p><h1 id="添加国内镜像"><a href="#添加国内镜像" class="headerlink" title="添加国内镜像"></a>添加国内镜像</h1><p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><blockquote><p><font color="red" size="3">Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color="red" size="3">Github</font>。</p></blockquote><p><a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png" alt></p><p>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" title="如何在windows下安装GIT" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p><p>检验是否安装成功：</p><p>安装完成后在命令提示符中输入<font color="red" size="3">git –version</font>验证是否安装成功</p><pre><code>git --version</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png" alt></p><h1 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h1><p><font color="red" size="3">Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href="https://github.com/" title="Github" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Github</font>官网点击 <font color="red" size="3">Sign Up </font>注册账户。</p><h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><p>登录<font color="red" size="3">Github</font>创建一个仓库</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png" alt></p><p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color="red" size="3">.github.io</font>后缀，<font color="red" size="3">README</font>初始化也要勾上。名称一定要和你的<font color="red" size="3">Github</font>名字完全一样，比如你<font color="red" size="3">github</font>名字叫<font color="red" size="3">A</font>，那么仓库名字一定要是<font color="red" size="3">A.github.io</font>。</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png" alt></p><p>选择一个自己喜欢的主题：<br>在上面创建的仓库里面点击<font color="red" size="3">Settings</font>（不是头像下面那个<font color="red" size="3">Settings</font>），向下拉到最后有个<font color="red" size="3">GitHub Pages</font>，点击<font color="red" size="3">Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color="red" size="3">GitHub Pages</font>，就可以预览效果啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png" alt></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote><p><font color="red" size="3">Hexo</font>是一款基于<font color="red" size="3">Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color="red" size="3">GitHub</font>和<font color="red" size="3">Heroku</font>上，是搭建博客的首选框架。</p></blockquote><p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color="red" size="3">（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，输入以下<font color="red" size="3"> npm </font>命令即可安装</p><pre><code>$ npm install hexo-cli -g</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png" alt></p><p>输入<font color="red" size="3">hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p><h1 id="配置本地hexo"><a href="#配置本地hexo" class="headerlink" title="配置本地hexo"></a>配置本地hexo</h1><p>还是在刚才新建的文件夹下再新建一个<font color="red" size="3">Hexo</font>文件夹，比如我的<font color="red" size="3">（C/panakot Blog/Hexo）</font>，在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，依次输入以下<font color="red" size="3"> npm </font>命令即可初始化。</p><pre><code>hexo initnpm install</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png" alt></p><p>初始化成功生成的文件：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png" alt></p><p>接着我们输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p><p>显示以下信息说明操作正确：</p><p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png" alt></p><p>按<font color="red" size="3">ctrl+c</font>关闭本地服务器。</p><p><strong>我们以后常用到的<font color="red" size="3">Hexo</font>命令：</strong></p><ul><li><p><font color="red" size="3">hexo s</font>等价于 <font color="red" size="3">hexo server</font>  #<font color="red" size="3">Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><font color="red" size="3">hexo g</font> 等价于 <font color="red" size="3">hexo generate</font>  #生成静态网页 (执行 $ <font color="red" size="3">hexo g</font>后会在站点根目录下生成<font color="red" size="3">public</font>文件夹,<font color="red" size="3"> hexo</font>会将”<font color="red" size="3">/blog/source/</font>“ 下面的<font color="red" size="3">.md</font>后缀的文件编译为<font color="red" size="3">.html</font>后缀的文件,存放在”<font color="red" size="3">/blog/public/ </font>“ 路径下)</p></li><li><p><font color="red" size="3">hexo d </font>等价于 <font color="red" size="3">hexo deploy</font>  #将本地数据部署到远端服务器(如<font color="red" size="3">github</font>)</p></li><li><p><font color="red" size="3">hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color="red" size="3">public</font>文件夹</p></li></ul><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="一、生成密钥"><a href="#一、生成密钥" class="headerlink" title="一、生成密钥"></a>一、生成密钥</h2><p>右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>输入以下命令：</p><pre><code>git config --global user.name &quot;Name&quot;git config --global user.email &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Name</font>和<font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的用户名和邮箱。</strong></p><p>然后生成密钥：</p><pre><code>ssh-keygen -t rsa -C &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的邮箱</strong></p><p>然后会出现：</p><pre><code>Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>回车之后：</p><pre><code>Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again:</code></pre><p>接下来会有：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:这里是各种字母数字组成的字符串，结尾是你的邮箱The key&#39;s randomart image is:这里也是各种字母数字符号组成的字符串</code></pre><p>现在密钥已经生成，一般存放在<font color="red" size="3">（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p><pre><code> clip &lt; ~/.ssh/id_rsa.pub</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png" alt></p><h2 id="二、连接Github"><a href="#二、连接Github" class="headerlink" title="二、连接Github"></a>二、连接Github</h2><p>在<font color="red" size="3">Github</font>头像下面点击<font color="red" size="3">Settings</font>，再点击<font color="red" size="3">SSH and GPG keys</font>，新建一个<font color="red" size="3">SSH</font>，名字任意。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png" alt></p><p>然后将刚才复制的密钥添加就可以了，像这样：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png" alt></p><p><strong>本地连接Github</strong></p><p>右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p><pre><code>ssh -T git@github.com//注意不要做任何修改</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png" alt></p><p>用记事本打开博客根目录下的<font color="red" size="3">_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color="red" size="3">Github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png" alt></p><p>修改最后一行的配置：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>改为：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository: git@github.com:panakot/panakot.github.io.git  branch: master</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png" alt></p><p>切记：</p><ul><li><strong><font color="red" size="3">repository</font>修改为你自己的<font color="red" size="3">github</font>项目地址</strong>。</li><li><strong>每一个冒号后面都有一个空格。</strong></li></ul><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入以下命令，安装一个扩展.</p><pre><code>npm i hexo-deployer-git</code></pre><p>然后输入下面的命令，新建一篇文章。</p><pre><code>hexo new post &quot;article title&quot;</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png" alt></p><p>然后打开<font color="red" size="3">C:\panakot Blog\Hexo\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color="red" size="3">.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png" alt></p><p>编写完<font color="red" size="3">markdown</font>文件后，根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>可以本地预览效果，最后输入<font color="red" size="3">hexo d</font>上传到<font color="red" size="3">github</font>上。</p><p>你的博客地址：<font color="red" size="3">https://你的用户名.github.io</font>，比如我的是：<a href="https://muyiio.github.io" target="_blank" rel="noopener">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p><h1 id="MarkDown文章编辑器说明"><a href="#MarkDown文章编辑器说明" class="headerlink" title="MarkDown文章编辑器说明"></a>MarkDown文章编辑器说明</h1><blockquote><p>前面我们提到了使用<font color="red" size="3">MarkDown</font>编辑我们的博客文章。<font color="red" size="3"> Markdown</font> 是<font color="red" size="3"> 2004</font> 年由 <font color="red" size="3">John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color="red" size="3"> .md </font>文件可以使用支持 <font color="red" size="3">Markdown </font>语法的编辑器编辑，然后将写好的文章<font color="red" size="3">（.md文件）</font>保存到<font color="red" size="3"> \Hexo\source_posts </font>文件夹下即可。</p></blockquote><p> <font color="red" size="3">Windows </font>上推荐使用 <font color="red" size="3">MarkdownPad2 </font>或者<font color="red" size="3">小书匠</font>编辑器，<font color="red" size="3">macOS </font>上使用<font color="red" size="3"> Mou</font> 编辑器，<font color="red" size="3">Linux </font>上使用 <font color="red" size="3">Remarkable</font> 编辑器，<font color="red" size="3">Web </font>端上使用 简书。</p><p><strong><a href="http://markdownpad.com/download.html" title="MarkDown" target="_blank" rel="noopener">点击此处</a>下载<font color="red" size="3">MarkDown</font><br>，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p><p><a href="https://www.jianshu.com/p/q81RER/" title="献给写作者的 Markdown 新手指南" target="_blank" rel="noopener">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p><p><a href="https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app" title="Markdown语法图文全面详解" target="_blank" rel="noopener">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p><p><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app" title="Markdown 语法手册 （完整整理版）" target="_blank" rel="noopener">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p><p><a href="https://sspai.com/post/25137" title="认识与入门 Markdown" target="_blank" rel="noopener">《认识与入门 Markdown》</a>（By Te_Lee）</p><p>写完文章记得在博客根目录<font color="red" size="3">Bash Here</font>输入<font color="red" size="3">hexo g</font>和<font color="red" size="3">hexo d</font>上传到网站。</p><h1 id="配置个性化域名"><a href="#配置个性化域名" class="headerlink" title="配置个性化域名"></a>配置个性化域名</h1><p>一顿操作下来，打开我们的博客还是：<font color="red" size="3"><a href="http://www.xxx.github.io" target="_blank" rel="noopener">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color="red" size="3"><a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> </font>。</p><p><a href="https://www.aliyun.com/" title="阿里云" target="_blank" rel="noopener">阿里云</a>和<a href="https://cloud.tencent.com/" title="腾讯云" target="_blank" rel="noopener">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png" alt></p><p><strong>方法一：</strong>点击添加记录，需要添加两个记录，两个记录类型都是 <font color="red" size="3">CNAME </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color="red" size="3">muyiio.github.io</font>），保存之后域名解析就完成了！</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png" alt></p><p><strong>方法二：</strong>两个记录类型为<font color="red" size="3"> A </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都为博客的<font color="red" size="3"> IP</font> 地址，<font color="red" size="3">IP </font>地址可以<font color="red" size="3"> cmd</font> 中输入<font color="red" size="3"> ping</font> 你的博客地址 获得（比如我的：<font color="red" size="3">ping muyiio.github.io</font>），保存之后域名解析就完成了！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/it_man/article/details/9017307" title="域名解析中A记录、CNAME、MX记录、NS记录的区别和联系" target="_blank" rel="noopener">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png" alt></p><p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p><blockquote><p>如果你填写的是没有<font color="red" size="3">www</font>的，比如 <font color="red" size="3">muyio.com</font>，那么无论是访问<font color="red" size="3"> <a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a> </font>还是<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font> ，都会自动跳转到<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font>。</p></blockquote><blockquote><p>如果你填写的是带<font color="red" size="3">www</font>的，比如 <font color="red" size="3"><a href="http://www.muyiio.com" target="_blank" rel="noopener">www.muyiio.com</a> </font>，那么无论是访问 <font color="red" size="3"><a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a></font> 还是 <font color="red" size="3"><a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a> </font>，都会自动跳转到 <font color="red" size="3"><a href="http://www.imuyiio.com" target="_blank" rel="noopener">http://www.imuyiio.com</a></font>。</p></blockquote><p>然后打开你的<font color="red" size="3">github</font>博客项目，点击settings，拉到下面<font color="red" size="3">Custom domain</font>处，填上你自己的域名，保存就可以了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png" alt></p><p>现在我们的项目根目录应该会出现一个名为<font color="red" size="3">CNAME</font>的文件了。如果没有的话，打开你本地博客<font color="red" size="3">/source</font>目录，我的是<font color="red" size="3">C:\Blog\Hexo\source</font>，新建<font color="red" size="3">CNAME</font>文件，<font color="red" size="3">（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color="red" size="3">hexo g、hexo d</font>上传到<font color="red" size="3">github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png" alt></p><p>现在就可以通过我们的个性化域名：<font color="red" size="3"><a href="http://www.xxx.com、xxx.com" target="_blank" rel="noopener">www.xxx.com、xxx.com</a></font>访问自己的博客了。</p><h1 id="更换自己喜欢的Hexo主题"><a href="#更换自己喜欢的Hexo主题" class="headerlink" title="更换自己喜欢的Hexo主题"></a>更换自己喜欢的Hexo主题</h1><p>点击进入<a href="https://hexo.io/themes/" title="Hexo主题专栏" target="_blank" rel="noopener">Hexo主题专栏</a>可以看到很多<font color="red" size="3">Hexo</font>主题：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png" alt></p><p>推荐：</p><p><a href="https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app" title="几个好用的hexo主题" target="_blank" rel="noopener">几个好用的hexo主题</a> (By fail_perfectly)</p><p>这里我们以<a href="http://huangxuan.me/" title="Bean Tech" target="_blank" rel="noopener">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color="red" size="3">GitHub</font>（<font color="red" size="3">有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png" alt></p><p>点击进入主题的<font color="red" size="3">GitHub</font>地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png" alt></p><p>复制该项目地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png" alt></p><p>然后打开<font color="red" size="3"> Hexo </font>文件夹下的<font color="red" size="3"> themes</font> 目录（如：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes</font>），右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>$ git clone 此处填写你刚才复制的主题地址</code></pre><p>以我们刚才复制的为例：</p><pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io</code></pre><p>下载完成后即可在<font color="red" size="3"> themes </font>目录下生成 <font color="red" size="3">hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color="red" size="3">Hexo</font> 文件夹下的配置文件 <font color="red" size="3">_config.yml </font>，找到关键字 <font color="red" size="3">theme</font>，修改参数为：<font color="red" size="3">theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png" alt></p><p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color="red" size="3">_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo_config.yml</font>），主要包含<font color="red" size="3"> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color="red" size="3"> _config.yml </font>文件里都有相关注释，按需修改即可。</p><h1 id="我的博客源代码"><a href="#我的博客源代码" class="headerlink" title="我的博客源代码"></a>我的博客源代码</h1><p><strong>参考博客源代码地址：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color="red" size="3">Star&amp;Fork</font>。</strong></p><p>下载源代码：git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:MUYIio/hexo-themes-matery.git</p><p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color="red" size="3">Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p><p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p><table><tr><td bgcolor="orange">-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            </td></tr></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p><p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 安装 CentOS 8.1 完整教程 </title>
      <link href="/vmware-an-zhuang-centos-8-1-wan-zheng-jiao-cheng.html"/>
      <url>/vmware-an-zhuang-centos-8-1-wan-zheng-jiao-cheng.html</url>
      
        <content type="html"><![CDATA[<p>我使用的<font color="red" size="3">VMware</font>版本：<font color="red" size="3">VMware 15 Pro</font></p><p>镜像：<font color="red" size="3">CentOS 8.1</font></p><p><strong>电脑配置需求：</strong></p><ul><li><font color="red" size="3">2 GB</font> 及以上的<font color="red" size="3">RAM</font>（官方推荐至少<font color="red" size="3">4G</font>）</li><li><font color="red" size="3">2 GHz </font>或以上的 <font color="red" size="3">CPU</font></li><li><font color="red" size="3">64 </font>位 <font color="red" size="3">x86</font> 架构</li><li><font color="red" size="3">20 GB </font>及以上硬盘空间</li></ul><p><strong>关于CentOS 8.1</strong></p><ul><li>基于Linux 4.18</li><li>提供 PHP 7.2、Python 3.6、Ansible 2.8、VIM 8.0 和 Squid 4</li><li>使用网络管理器（nmcli 和 nmtui）进行网络配置，移除了网络脚本<br>通过 BaseOS 和应用流(AppStream)仓库发布.</li><li>AppStream 是对传统rpm格式的全新扩展，为一个组件同时提供多个主要版本</li><li>YUM 包管理器基于 DNF 技术，提供模块化内容支持，增强了性能，并且提供了设计良好的API用于与其他工具集成</li><li>RHEL 8提供了版本控制工具: Git 2.18, Mercurial 4.8,和 Subversion 1.10.</li></ul><blockquote><p>内核实时修补；称为 FRR 的新路由协议堆栈（支持多种 IPv4 和 IPv6 路由协议）；伯克利数据包筛选器（eBPF）的扩展版本，可帮助系统管理员解决复杂的网络问题；支持在使用设备时对 LUKS2 中的块设备进行重新加密；此外，还提供了一种用于为容器生成 SELinux 策略的新工具 udica.</p></blockquote><p><font color="red" size="3">CentOS 8</font>系列增加了许多新特性，<font color="red" size="3">CentOS 8.1</font>相当于它的第二个发行版本，我这里就不列出了，具体可以看官方文档：</p><p><a href="https://wiki.centos.org/zh/Manuals/ReleaseNotes/CentOS8.1905#A.2BbpBO43gB-" target="_blank" rel="noopener">CentOS 官网文档手册</a></p><p><a href="https://www.cnblogs.com/RXDXB/p/11660287.html" target="_blank" rel="noopener">Centos8与Centos7区别参照redhat）</a></p><h1 id="一、准备过程"><a href="#一、准备过程" class="headerlink" title="一、准备过程"></a>一、准备过程</h1><p>目前比较流行的两款虚拟机软件 <font color="red" size="3">VMware</font> 、<font color="red" size="3">VirtualBox</font>，<font color="red" size="3">VirtualBox</font>安装<font color="red" size="3">CentOS 8</font>系列目前还有很多<font color="red" size="3">Bug</font>，推荐使用<font color="red" size="3">VMware</font>。</p><p>1.安装<font color="red" size="3">VMware</font></p><p>如果你还没有安装虚拟机，进入<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" title="VMware" target="_blank" rel="noopener">VMware官网</a>下载相应版本安装即可：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/01.png" alt></p><p>官网下载过程可能有点慢，这里安装过程我就不赘述了。</p><p>2.下载<font color="red" size="3">CentOS 8.1</font>镜像资源</p><p>进入<a href="http://mirrors.huaweicloud.com/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso" title="CentOS" target="_blank" rel="noopener">CentOS官网</a>下载<font color="red" size="3">CentOS 8.1</font>镜像，我这里给的是在华为云的，下载速度还是可以。</p><h1 id="二、创建虚拟机"><a href="#二、创建虚拟机" class="headerlink" title="二、创建虚拟机"></a>二、创建虚拟机</h1><p>1.打开<font color="red" size="3">VMware</font>，点击创建新的虚拟机：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/02.png" alt></p><p>2.点击自定义（高级）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/03.png" alt></p><p>3.这一步直接默认就可以：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/04.png" alt></p><p>4.选择稍后安装操作系统：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/05.png" alt></p><p>5.选择<font color="red" size="3">Linux</font>，版本选择<font color="red" size="3">Linux 4 ×64位</font>，因为<font color="red" size="3">CentOS 8</font>系列基于<font color="red" size="3"> Linux</font> 内核<font color="red" size="3"> 4.18</font>：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/06.png" alt></p><p>6.虚拟机名称随便，安装位置看自己电脑配置吧，建议安装在<font color="red" size="3">D</font>盘：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/07.png" alt></p><p>7.处理器数量根据自己电脑来配置，反正不够后面可以更改，要安装图形界面的话可以填大一点，新手就这个配置也可以了：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/08.png" alt></p><p>8.内存大小根据自己电脑适当配置，我的电脑内存<font color="red" size="3">16G</font>，所以我给它分配<font color="red" size="3">4G</font>，要安装图形界面的话可以填大一点：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/09.png" alt></p><p>9.设置虚拟机网络连接模式（<font color="red" size="3">NAT</font>）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/10.png" alt></p><p><strong>关于网络连接模式说明：</strong></p><ul><li><p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p></li><li><p>NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p></li><li><p>仅主机：虚拟机与宿主机直接连起来</p></li></ul><p>10.选择<font color="red" size="3">I/O</font>控制器类型，然后下一步：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/11.png" alt></p><p>11.选择磁盘类型：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/12.png" alt></p><p>12.选择创建新虚拟磁盘，然后下一步：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/13.png" alt></p><p>13.根据自己的需要分配磁盘容量，勾选将虚拟磁盘拆分成多个文件（方便以后将虚拟机拷贝到设备），然后下一步：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/14.png" alt></p><p>14.根据自己需要指定磁盘文件存储位置，我放在D盘：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/15.png" alt></p><p>15.到这里虚拟机就创建完成了，可以点击自定义硬件更改配置，点击完成创建成功：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/16.png" alt></p><h1 id="三、安装CentOS-8-1"><a href="#三、安装CentOS-8-1" class="headerlink" title="三、安装CentOS 8.1"></a>三、安装CentOS 8.1</h1><p>1.点击编辑虚拟机设置：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/17.png" alt></p><p>2.选择<font color="red" size="3">CD/DVD</font>，勾选启动时连接，再选择使用ISO映像文件，找到下载好的系统镜像文件添加进去，最后确定：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/18.png" alt></p><p>3.开启此虚拟机：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/19.png" alt></p><p>4.开启虚拟机后会出现以下界面，鼠标点进黑窗口，使用键盘方向键选择第一项，安装<font color="red" size="3">CentOS 8</font>，回车，系统开始自动安装</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/20.png" alt></p><p>5.安装完成后选择语言，根据自己情况选择，然后点击继续：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/21.png" alt></p><p>6.首先打开网络和主机名，给虚拟机连上网络：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/22.png" alt></p><p><strong>如果网络连接不上，多半是<font color="red" size="3">DHCP</font>问题，解决办法：</strong></p><p><a href="https://blog.csdn.net/suoyudong/article/details/83037670" target="_blank" rel="noopener">解决安装centos 过程中以太网连接不上网络，不能自动分配ip的问题</a> (By 索渝东)</p><p>7.点击时间和日期，设置系统时间并更改时区(打开网络时间)：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/23.png" alt></p><p>8.选择安装目的地：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/24.png" alt></p><p>9.选择自定义配置，点击完成：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/25.png" alt></p><p>10.添加磁盘分区</p><p><font color="red" size="3">Linux</font>的分区，并不像<font color="red" size="3">Windows</font>一样，分成<font color="red" size="3">C、D、E</font>等盘，介绍几个重要的分区：</p><ul><li>交换分区（swap）：交换分区和Windows的虚拟内存很像。现在内存也便宜，物理服务器的配置也高，以前的说法是一般为物理内存的2倍，现在一般情况下划分为4~8GB备用即可。我们虚拟机的内存是4GB，我们就划8GB吧。</li><li>启动分区（boot）：200MB足够了。</li><li>根分区（/）：剩余空间都给根分区吧。当然我们也可以单独划出/data分区，专门用来存储存数据，不过这里我们先不这样做，直接全部都给根分区。</li></ul><p>按照下图顺序依次进行设置：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/26.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/27.png" alt></p><p>11.点击完成后会弹出更改摘要页面，点击接受更改：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/28.png" alt></p><p>12.点击开始安装：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/29.png" alt></p><p>13.设置<font color="red" size="3">ROOT</font>密码：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/30.png" alt></p><p>14.点击创建用户，可以把用户设为管理员方便操作，如果密码简单就点击两次完成：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/31.png" alt></p><p>15.安装完成后点击重启电脑：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/32.png" alt></p><p>16.重启完成后点击<font color="red" size="3">LICENS INFORMATION</font>,勾选同意许可，然后点击完成：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/33.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/34.png" alt></p><p>17.点击结束配置：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/35.png" alt></p><p>18.来到登录界面，点击未列出，以<font color="red" size="3">root</font>登录，方便后面配置操作：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/36.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/37.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/38.png" alt></p><p>19.选择语言：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/39.png" alt></p><p>选择键盘布局：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/40.png" alt></p><p>是否打开位置服务：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/41.png" alt></p><p>然后按照需要添加账号，然后就可以进入啦：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/42.png" alt></p><p>20.关闭系统使用帮助后，来到我们的<font color="red" size="3">centos8.1</font>桌面，点击活动可以看到系统软件，第一个是内置浏览器，点击最下面可以看到系统所有软件：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/43.png" alt></p><p>21.点击右上角折叠按钮可以连接网络，打开浏览器就可以访问啦，如果不能联网，在上面已经给出解决办法：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/44.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/45.png" alt></p><p>22.右上角有关机按钮，点击就可以关机：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/VMware-%E5%AE%89%E8%A3%85-CentOS-8-1-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/46.png" alt></p><p>到这里，我们的<font color="red" size="3">CentOS 8 Linux</font> 就算安装完成了，其他<font color="red" size="3">CentOS 8 </font>系列发行版本安装过程类似，可作参考。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
